<?xml version="1.0" encoding="US-ASCII"?>
<!-- Convert to HTML and Text with xml2rfc: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC5533 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5533.xml">
  <!ENTITY RFC5062 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5062.xml">
  <!ENTITY RFC5061 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5061.xml">
  <!ENTITY RFC4960 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4960.xml">
  <!ENTITY RFC4987 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4987.xml">
  <!ENTITY RFC6234 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6234.xml">
  <!ENTITY RFC4086 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4086.xml">
  <!ENTITY RFC3168 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3168.xml">
  <!ENTITY RFC5681 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5681.xml">
  <!ENTITY RFC2119 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC2992 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2992.xml">
  <!ENTITY RFC2979 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2979.xml">
  <!ENTITY RFC2104 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2104.xml">
  <!ENTITY RFC2018 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2018.xml">
  <!ENTITY RFC1918 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
  <!ENTITY RFC0793 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml">
  <!ENTITY RFC1323 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1323.xml">
  <!ENTITY RFC1122 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
  <!ENTITY RFC3135 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3135.xml">
  <!ENTITY RFC3022 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3022.xml">
  <!ENTITY RFC6181 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6181.xml">
  <!ENTITY RFC6182 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6182.xml">
  <!ENTITY RFC6356 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6356.xml">
  <!ENTITY RFC6555 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6555.xml">
  <!ENTITY RFC5226 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
  <!ENTITY RFC6897 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6897.xml">
  <!ENTITY RFC6528 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6528.xml">
  <!ENTITY RFC5961 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5961.xml">
  <!ENTITY RFC6824 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6824.xml">
  <!ENTITY RFC7413 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
  <!ENTITY RFC7430 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7430.xml">
  <!ENTITY RFC8174 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc rfcedstyle="yes"?>

<rfc category="std" docName="draft-ietf-mptcp-rfc6824bis-11" ipr="trust200902" obsoletes="6824">
  <front>
    <title abbrev="Multipath TCP">TCP Extensions for Multipath Operation with Multiple Addresses</title>

    <author fullname="Alan Ford" initials="A." surname="Ford">
      <organization>Pexip</organization>
      <address>
      <!--  <postal>
          <street>Beech Court</street>
          <city>Hurst</city>
          <region>Berkshire</region>
          <code>RG10 0RQ</code>
          <country>UK</country>
        </postal> -->
        <email>alan.ford@gmail.com</email>
      </address>
    </author>

    <author fullname="Costin Raiciu" initials="C." surname="Raiciu">
      <organization abbrev="U. Politechnica of Bucharest">University Politehnica of Bucharest</organization>
      <address>
        <postal>
          <street>Splaiul Independentei 313</street>
          <city>Bucharest</city>
          <country>Romania</country>
        </postal>
        <email>costin.raiciu@cs.pub.ro</email>
      </address>
    </author>

    <author fullname="Mark Handley" initials="M." surname="Handley">
      <organization abbrev="U. College London">University College London</organization>
      <address>
        <postal>
          <street>Gower Street</street>
          <city>London</city>
          <code>WC1E 6BT</code>
          <country>UK</country>
        </postal>
        <email>m.handley@cs.ucl.ac.uk</email>
      </address>
    </author>

    <author fullname="Olivier Bonaventure" initials="O." surname="Bonaventure">
      <organization abbrev="U. catholique de Louvain">Universit&eacute; catholique de Louvain</organization>
      <address>
        <postal>
          <street>Pl. Ste Barbe, 2</street>
          <code>1348</code>
          <city>Louvain-la-Neuve</city>
          <country>Belgium</country>
        </postal>
        <email>olivier.bonaventure@uclouvain.be</email>
      </address>
    </author>

    <author fullname="Christoph Paasch" initials="C." surname="Paasch">
      <organization abbrev="Apple, Inc.">Apple, Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city>Cupertino</city>
          <country>US</country>
        </postal>
        <email>cpaasch@apple.com</email>
      </address>
    </author>

    <date year="2018" />

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>tcp extensions multipath multihomed subflow</keyword>

    <abstract>
      <t>TCP/IP communication is currently restricted to a single path per connection, yet multiple paths often exist between peers. The simultaneous use of these multiple paths for a TCP/IP session would improve resource usage within the network and, thus, improve user experience through higher throughput and improved resilience to network failure.</t>

      <t>Multipath TCP provides the ability to simultaneously use multiple paths between peers. This document presents a set of extensions to traditional TCP to support multipath operation. The protocol offers the same type of service to applications as TCP (i.e., reliable bytestream), and it provides the components necessary to establish and use multiple TCP flows across potentially disjoint paths.</t>

      <t>This document specifies v1 of Multipath TCP, obsoleting v0 as specified in RFC6824 <xref target="RFC6824"/> through clarifications and modifications primarily driven by deployment experience.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction" anchor="sec_intro">
      <t>Multipath TCP (MPTCP) is a set of extensions to regular TCP <xref target="RFC0793"/> to provide a Multipath TCP <xref target="RFC6182"/> service, which enables a transport connection to operate across multiple paths
simultaneously. This document presents the protocol changes required to add multipath capability to TCP; specifically, those for signaling and setting up multiple paths ("subflows"), managing these subflows, reassembly of data, and termination of sessions.
      This is not the only information required to create a Multipath TCP implementation, however. This document is complemented by three others:
        <list style="symbols">
          <t>Architecture <xref target="RFC6182"/>, which explains the motivations behind Multipath TCP, contains a discussion of high-level design decisions on which this design is based, and an explanation of a functional separation through which an extensible MPTCP implementation can be developed.</t>
          <t>Congestion control <xref target="RFC6356"/> presents a safe congestion control algorithm for coupling the behavior of the multiple paths in order to "do no harm" to other network users.</t>
          <t>Application considerations <xref target="RFC6897"/> discusses what impact MPTCP will have on applications, what applications will want to do with MPTCP, and as a consequence of these factors, what API extensions an MPTCP implementation should present.</t>
        </list>
      This document is an update to, and obsoletes, the v0 specification of Multipath TCP <xref target="RFC6824"/>. This document specifies MPTCP v1, which is not backward compatible with MPTCP v0. This document additionally defines version negotiation procedures for implementations that support both versions.
      </t>

      <section title="Design Assumptions" anchor="sec_assum">
        <t>In order to limit the potentially huge design space, the working group imposed two key constraints on the Multipath TCP design presented in this document:
          <list style="symbols">
            <t>It must be backwards-compatible with current, regular TCP, to increase its chances of deployment.</t>
            <t>It can be assumed that one or both hosts are multihomed and multiaddressed.</t>
          </list>
        </t>
        <t>To simplify the design, we assume that the presence of multiple addresses at a host is sufficient to indicate the existence of multiple paths. These paths need not be entirely disjoint: they may share one or many routers between them. Even in such a situation, making use of multiple paths is beneficial, improving resource utilization and resilience to a subset of node failures. The congestion control algorithms defined in <xref target="RFC6356"/> ensure this does not act detrimentally. Furthermore, there may be some scenarios where different TCP ports on a single host can provide disjoint paths (such as through certain Equal-Cost Multipath (ECMP) implementations <xref target="RFC2992"/>), and so the MPTCP design also supports the use of ports in path identifiers.</t>
        <t>There are three aspects to the backwards-compatibility listed above (discussed in more detail in <xref target="RFC6182"/>):
          <list style="hanging">
            <t hangText="External Constraints:"> The protocol must function through the vast majority of existing 
middleboxes such as NATs, firewalls, and proxies, and as such must resemble existing TCP as far as possible on the 
wire. Furthermore, the protocol must not assume the segments it sends on the wire arrive unmodified at the destination:
they may be split or coalesced; TCP options may be removed or duplicated. </t>
            <t hangText="Application Constraints:"> The protocol must be usable with no change to existing applications that use the common TCP API (although it is reasonable that not all features would be available to such legacy applications). Furthermore, the protocol must provide the same service model as regular TCP to the application.</t>
            <t hangText="Fallback:"> The protocol should be able to fall back to standard TCP with no interference from the user, to be able to communicate with legacy hosts.</t>
          </list>
        </t>
        <t>The complementary application considerations document <xref target="RFC6897"/> discusses the necessary features of an API to provide backwards-compatibility, as well as API extensions to convey the behavior of MPTCP at a level of control and information equivalent to that available with regular, single-path TCP.</t>
        <t>Further discussion of the design constraints and associated design decisions are given in the MPTCP Architecture document <xref target="RFC6182"/> and in <xref target="howhard"/>.</t>
      </section>

      <section title="Multipath TCP in the Networking Stack" anchor="sec_layers">
        <t>MPTCP operates at the transport layer and aims to be transparent to both higher and lower 
layers. It is a set of additional features on top of standard TCP; <xref target="fig_arch" /> illustrates 
this layering. MPTCP is designed to be usable by legacy applications with no changes; detailed discussion 
of its interactions with applications is given in <xref target="RFC6897"/>.</t>

        <figure align="center" anchor="fig_arch" title="Comparison of Standard TCP and MPTCP Protocol Stacks">
          <artwork align="left"><![CDATA[
                                +-------------------------------+
                                |           Application         |
   +---------------+            +-------------------------------+
   |  Application  |            |             MPTCP             |
   +---------------+            + - - - - - - - + - - - - - - - +
   |      TCP      |            | Subflow (TCP) | Subflow (TCP) |
   +---------------+            +-------------------------------+
   |      IP       |            |       IP      |      IP       |
   +---------------+            +-------------------------------+
            ]]></artwork>
        </figure>
      </section>

      <section title="Terminology">
        <t>This document makes use of a number of terms that are either MPTCP-specific or have defined meaning in the context of MPTCP, as follows:
        <list style="hanging">
          <t hangText="Path:"> A sequence of links between a sender and a receiver, defined in this context by a 4-tuple of source and destination address/port pairs.</t>
          <t hangText="Subflow:"> A flow of TCP segments operating over an individual path, which forms part of a larger MPTCP connection. A subflow is started and terminated similar to a regular TCP connection.</t>
          <t hangText="(MPTCP) Connection:"> A set of one or more subflows, over which an application can communicate between two hosts. There is a one-to-one mapping between a connection and an application socket.</t>
          <t hangText="Data-level:"> The payload data is nominally transferred over a connection, which in turn is transported over subflows.  Thus, the term "data-level" is synonymous with "connection level", in contrast to "subflow-level", which refers to properties of an individual subflow.</t>
          <t hangText="Token:"> A locally unique identifier given to a multipath connection by a host. May also be referred to as a "Connection ID".</t>
          <t hangText="Host:"> An end host operating an MPTCP implementation, and either initiating or accepting an MPTCP connection.</t>
        </list>
        In addition to these terms, note that MPTCP's interpretation of, and effect on, regular single-path TCP semantics are discussed in <xref target="sec_semantics"/>.</t>
      </section>

      <section title="MPTCP Concept" anchor="sec_operation">
        <t>This section provides a high-level summary of normal 
operation of MPTCP, and is illustrated by the scenario shown in 
<xref target="fig_scenario"/>. A detailed description of operation is given in <xref target="sec_protocol"/>. 
          <list style="symbols">
            <t>To a non-MPTCP-aware application, MPTCP will behave the same as normal TCP. Extended APIs could provide 
additional control to MPTCP-aware applications <xref target="RFC6897"/>. 
An application begins by opening a TCP socket in the normal way.
MPTCP signaling and operation are handled by the MPTCP implementation.
</t>
            <t>An MPTCP connection begins similarly to a regular TCP connection. This is 
illustrated in <xref target="fig_scenario"/> where an MPTCP connection is established between 
addresses A1 and B1 on Hosts A and B, respectively.</t>
            <t>If extra paths are available, additional TCP sessions (termed MPTCP "subflows") 
are created on these paths, and are combined with the existing session, which continues 
to appear as a single connection to the applications at both ends. The creation of the 
additional TCP session is illustrated between Address A2 on Host A and Address B1 on 
Host B.</t>
            <t>MPTCP identifies multiple paths by the presence of multiple addresses 
at hosts. Combinations of these multiple addresses equate to the additional paths. 
In the example, other potential paths that could be set up are A1&lt;-&gt;B2 and A2&lt;-&gt;B2. 
Although this additional session is shown as being initiated from A2, it could equally have 
been initiated from B1.</t>
            <t>The discovery and setup of additional subflows
will be achieved through a path management method; this document describes a mechanism 
by which a host can initiate new subflows by using its own additional addresses, or by 
signaling its available addresses to the other host.</t>
            <t>MPTCP adds connection-level sequence numbers to allow the reassembly of 
segments arriving on multiple subflows with differing network delays. </t>
            <t>Subflows are terminated as regular TCP connections, with a four-way FIN
handshake. The MPTCP connection is terminated by a connection-level FIN.</t>
          </list>
        </t>
          <?rfc needLines='17'?>
          <figure align="center" anchor="fig_scenario" title="Example MPTCP Usage Scenario">
            <artwork align="left"><![CDATA[
            Host A                               Host B
   ------------------------             ------------------------
   Address A1    Address A2             Address B1    Address B2
   ----------    ----------             ----------    ----------
       |             |                      |             |
       |     (initial connection setup)     |             |
       |----------------------------------->|             |
       |<-----------------------------------|             |
       |             |                      |             | 
       |            (additional subflow setup)            |
       |             |--------------------->|             |
       |             |<---------------------|             |
       |             |                      |             |
       |             |                      |             |
              ]]></artwork>
          </figure>
      </section>

      <section title="Requirements Language">
	<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP&nbsp;14
	<xref target="RFC2119">RFC 2119</xref>
	<xref target="RFC8174">RFC 8174</xref>
	when, and only when, they appear in all capitals, as shown here.</t>

      </section>
    </section>

    <section title="Operation Overview" anchor="sec_overview">
      <t>This section presents a single description of common MPTCP operation, with reference to the protocol operation. This is a high-level overview of the key functions; the full specification follows in <xref target="sec_protocol"/>. Extensibility and negotiated features are not discussed here. Considerable reference is made to symbolic names of MPTCP options throughout this section -- these are subtypes of the IANA-assigned MPTCP option (see <xref target="IANA"/>), and their formats are defined in the detailed protocol specification that follows in <xref target="sec_protocol"/>.</t>

<t>A Multipath TCP connection provides a bidirectional bytestream between two hosts communicating like normal TCP and, thus, does not require any change to the applications. However, Multipath TCP enables the hosts to use different paths with different IP addresses to exchange packets belonging to the MPTCP connection. A Multipath TCP connection appears like a normal TCP connection to an application. However, to the network layer, each MPTCP subflow looks like a regular TCP flow whose segments carry a new TCP option type. Multipath TCP manages the creation, removal, and utilization of these subflows to send data. The number of subflows that are managed within a Multipath TCP connection is not fixed and it can fluctuate during the lifetime of the Multipath TCP connection.</t>

<t>All MPTCP operations are signaled with a TCP option -- a single numerical type for MPTCP, with "sub-types" for each MPTCP message. What follows is a summary of the purpose and rationale of these messages.</t>
<section title="Initiating an MPTCP Connection">
<t>This is the same signaling as for initiating a normal TCP connection, but the SYN, SYN/ACK, and initial ACK (and data) packets also carry the MP_CAPABLE option. This option is variable length and serves multiple purposes. Firstly, it verifies whether the remote host supports Multipath TCP; secondly, this option allows the hosts to exchange some information to authenticate the establishment of additional subflows. Further details are given in <xref target="sec_init"/>.</t>

<figure><artwork align="left"><![CDATA[
   Host A                                  Host B
   ------                                  ------
   MP_CAPABLE                ->
   [flags]
                             <-            MP_CAPABLE
                                           [B's key, flags]
   ACK + MP_CAPABLE (+ data) ->
   [A's key, B's key, flags, (data-level details)]
]]></artwork></figure>
</section>

<t>Retransmission of the ACK + MP_CAPABLE can occur if it is not known if it has been received. The following diagrams show all possible exchanges for the initial subflow setup to ensure this reliability.</t>

<figure><artwork align="left"><![CDATA[
   Host A (with data to send immediately)  Host B
   ------                                  ------
   MP_CAPABLE                ->
   [flags]
                             <-            MP_CAPABLE
                                           [B's key, flags]
   ACK + MP_CAPABLE + data   ->
   [A's key, B's key, flags, data-level details]


   Host A (with data to send later)        Host B
   ------                                  ------
   MP_CAPABLE                ->
   [flags]
                             <-            MP_CAPABLE
                                           [B's key, flags]
   ACK + MP_CAPABLE          ->
   [A's key, B's key, flags]

   ACK + MP_CAPABLE + data   ->
   [A's key, B's key, flags, data-level details]


   Host A                                  Host B (sending first)
   ------                                  ------
   MP_CAPABLE                ->
   [flags]
                             <-            MP_CAPABLE
                                           [B's key, flags]
   ACK + MP_CAPABLE          ->
   [A's key, B's key, flags]

                             <-            ACK + DSS + data
                                           [data-level details]
]]></artwork></figure>
</section>


<section title="Associating a New Subflow with an Existing MPTCP Connection">
<t>The exchange of keys in the MP_CAPABLE handshake provides material that can be used to authenticate the endpoints when new subflows will be set up. 
Additional subflows begin in the same way as initiating a normal TCP connection, but the SYN, SYN/ACK, and ACK packets also carry the MP_JOIN option. </t>

<t>Host A initiates a new subflow between one of its addresses and one of Host B's addresses. The token -- generated from the key -- is used to identify which MPTCP connection it is joining, and the HMAC is used for authentication. The Hash-based Message Authentication Code (HMAC) uses the keys exchanged in the MP_CAPABLE handshake, and the random numbers (nonces) exchanged in these MP_JOIN options. MP_JOIN also contains flags and an Address ID that can be used to refer to the source address without the sender needing to know if it has been changed by a NAT. Further details are in <xref target="sec_join"/>.</t>

<figure><artwork align="left"><![CDATA[
   Host A                                  Host B
   ------                                  ------
   MP_JOIN               ->
   [B's token, A's nonce, 
    A's Address ID, flags]
                         <-                MP_JOIN
                                           [B's HMAC, B's nonce,
                                            B's Address ID, flags]
   ACK + MP_JOIN         ->
   [A's HMAC]

                         <-                ACK
]]></artwork></figure>
</section>

<section title="Informing the Other Host about Another Potential Address">
<t>The set of IP addresses associated to a multihomed host may change during the lifetime of an MPTCP connection. MPTCP supports the addition and removal of addresses on a host both implicitly and explicitly. If Host A has established a subflow starting at address/port pair IP#-A1 and wants to open a second subflow starting at address/port pair IP#-A2, it simply initiates the establishment of the subflow as explained above. The remote host will then be implicitly informed about the new address.</t>

<t>In some circumstances, a host may want to advertise to the remote host the availability of an address without establishing a new subflow, for example, when a NAT prevents setup in one direction.  In the example below, Host A informs Host B about its alternative IP address/port pair (IP#-A2). Host B may later send an MP_JOIN to this new address. This option contains a HMAC to authenticate the address as having been sent from the originator of the connection. The receiver of this option echoes it back to the client to indicate successful reception. Further details are in <xref target="sec_add_address"/>.</t>

<figure><artwork align="left"><![CDATA[
   Host A                                 Host B
   ------                                 ------
   ADD_ADDR                  ->
   [Echo-flag=0,
    IP#-A2,
    IP#-A2's Address ID,
    HMAC of IP#-A2]

                             <-          ADD_ADDR
                                         [Echo-flag=1,
                                          IP#-A2,
                                          IP#-A2's Address ID,
                                          HMAC of IP#-A2]
]]></artwork></figure>

<t>There is a corresponding signal for address removal, making use of the Address ID that is signaled in the add address handshake. Further details in <xref target="sec_remove_addr"/>.</t>

<figure><artwork align="left"><![CDATA[
   Host A                                 Host B
   ------                                 ------
   REMOVE_ADDR               ->
   [IP#-A2's Address ID]
]]></artwork></figure>
</section>

<section title="Data Transfer Using MPTCP">
<t>To ensure reliable, in-order delivery of data over subflows that may appear and disappear at any time, MPTCP uses a 64-bit data sequence number (DSN) to number all data sent over the MPTCP connection. Each subflow has its own 32-bit sequence number space, utilising the regular TCP sequence number header, and an MPTCP option maps the subflow sequence space to the data sequence space. In this way, data can be retransmitted on different subflows (mapped to the same DSN) in the event of failure.</t>

<t>The "Data Sequence Signal" carries the "Data Sequence Mapping". The data sequence mapping consists of the subflow sequence number, data sequence number, and length for which this mapping is valid. This option can also carry a connection-level acknowledgment (the "Data ACK") for the received DSN.</t>

<t>With MPTCP, all subflows share the same receive buffer and advertise the same receive window. There are two levels of acknowledgment in MPTCP. Regular TCP acknowledgments are used on each subflow to acknowledge the reception of the segments sent over the subflow independently of their DSN. In addition, there are connection-level acknowledgments for the data sequence space. These acknowledgments track the advancement of the bytestream and slide the receiving window.</t>

<t>Further details are in <xref target="sec_generalop"/>.</t>

<figure><artwork align="left"><![CDATA[
   Host A                                 Host B
   ------                                 ------
   DATA_SEQUENCE_SIGNAL      ->
   [Data Sequence Mapping]
   [Data ACK]
   [Checksum]
]]></artwork></figure>
</section>

<section title="Requesting a Change in a Path's Priority">
<t>Hosts can indicate at initial subflow setup whether they wish the subflow to be used as a regular or backup path -- a backup path only being used if there are no regular paths available. During a connection, Host A can request a change in the priority of a subflow through the MP_PRIO signal to Host B. Further details are in <xref target="sec_policy"/>.</t>

<figure><artwork align="left"><![CDATA[
   Host A                                 Host B
   ------                                 ------
   MP_PRIO                   ->                 
]]></artwork></figure>
</section>

<section title="Closing an MPTCP Connection">
<t>When a host wants to close an existing subflow, but not the whole connection, it can initiate a regular TCP FIN/ACK exchange.</t>

<t>When Host A wants to inform Host B that it has no more data to send, it signals this "Data FIN" as part of the Data Sequence Signal (see above). It has the same semantics and behavior as a regular TCP FIN, but at the connection level. Once all the data on the MPTCP connection has been successfully received, then this message is acknowledged at the connection level with a DATA_ACK. Further details are in <xref target="sec_close"/>.</t>
                       
<figure><artwork align="left"><![CDATA[
   Host A                                 Host B
   ------                                 ------
   DATA_SEQUENCE_SIGNAL      ->
   [Data FIN]
                             <-           (MPTCP DATA_ACK)
]]></artwork></figure>

<t>There is an additional method of connecton closure, referred to as "Fast Close", which is analogous to closing a single-path TCP connection with a RST signal. The MP_FASTCLOSE signal is used to indicate to the peer that the connection will be abruptly closed and no data will be accepted anymore. This can be used on an ACK (ensuring reliability of the signal), or a RST (which is not). Both examples are shown in the following diagrams. Further details are in <xref target="sec_fastclose"/>.</t>

<figure><artwork align="left"><![CDATA[
   Host A                                 Host B
   ------                                 ------
   ACK + MP_FASTCLOSE          ->
   [B's key]

   [RST on all other subflows] ->

                               <-         [RST on all subflows]


   Host A                                 Host B
   ------                                 ------
   RST + MP_FASTCLOSE          ->
   [B's key] [on all subflows]

                               <-         [RST on all subflows]
]]></artwork></figure>
</section>

<section title="Notable Features">
<t>It is worth highlighting that MPTCP's signaling has been designed with several key requirements in mind:

<list style="symbols">
<t>To cope with NATs on the path, addresses are referred to by Address IDs, in case the IP packet's source 
address gets changed by a NAT. Setting up a new TCP flow is not possible if the passive opener is behind a NAT; 
to allow subflows to be created when either end is behind a NAT, MPTCP uses the ADD_ADDR message. </t>

<t>MPTCP falls back to ordinary TCP if MPTCP operation is not possible, for example, if one host is not MPTCP capable or if a middlebox alters the payload. This is discussed in <xref target="sec_fallback"/>.</t>

<t>To meet the threats identified in <xref target="RFC6181"/>, the following steps are taken: keys are sent in the clear in the MP_CAPABLE messages; MP_JOIN messages are secured with HMAC-SHA256 (<xref target="RFC2104"/>, <xref target="SHS"/>) using those keys; and standard TCP validity checks are made on the other messages (ensuring sequence numbers are in-window <xref target="RFC5961"/>). Residual threats to MPTCP v0 <xref target="RFC6824"/> were identified in <xref target="RFC7430"/>, and those affecting the protocol (i.e. modification to ADD_ADDR) have been incorporated in this document. Further discussion of security can be found in <xref target="sec_security"/>.</t>
</list></t>
</section>
    </section>

    <section title="MPTCP Protocol" anchor="sec_protocol">
      <t>This section describes the operation of the MPTCP protocol, and is subdivided into sections for each key part of the protocol operation.</t>
      <t>All MPTCP operations are signaled using optional TCP header fields. A single TCP option number ("Kind") has been assigned by IANA for MPTCP (see <xref target="IANA"/>), and then individual messages will be determined by a "subtype", the values of which are also stored in an IANA registry (and are also listed in <xref target="IANA"/>).</t>
      <t>Throughout this document, when reference is made to an MPTCP option by symbolic name, such as "MP_CAPABLE", this refers to a TCP option with the single MPTCP option type, and with the subtype value of the symbolic name as defined in <xref target="IANA"/>. This subtype is a 4-bit field -- the first 4 bits of the option payload, as shown in <xref target="fig_option"/>. The MPTCP messages are defined in the following sections.</t>

      <?rfc needLines='8'?>
      <figure align="center" anchor="fig_option" title="MPTCP Option Format">
        <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-----------------------+
   |     Kind      |    Length     |Subtype|                       |
   +---------------+---------------+-------+                       |
   |                     Subtype-specific data                     |
   |                       (variable length)                       |
   +---------------------------------------------------------------+
          ]]></artwork>
      </figure>

      <t>Those MPTCP options associated with subflow initiation are used on packets with the SYN flag set. Additionally, there is one MPTCP option for signaling metadata to ensure segmented data can be recombined for delivery to the application.</t>
      <t>The remaining options, however, are signals that do not need to be on a specific packet, such as those for signaling additional addresses. Whilst an implementation may desire to send MPTCP options as soon as possible, it may not be possible to combine all desired options (both those for MPTCP and for regular TCP, such as SACK (selective acknowledgment) <xref target="RFC2018"/>) on a single packet. Therefore, an implementation may choose to send duplicate ACKs containing the additional signaling information. This changes the semantics of a duplicate ACK; these are usually only sent as a signal of a lost segment <xref target="RFC5681"/> in regular TCP. Therefore, an MPTCP implementation receiving a duplicate ACK that contains an MPTCP option MUST NOT treat it as a signal of congestion. Additionally, an MPTCP implementation SHOULD NOT send more than two duplicate ACKs in a row for the purposes of sending MPTCP options alone, in order to ensure no middleboxes misinterpret this as a sign of congestion.</t>
      <t>Furthermore, standard TCP validity checks (such as ensuring the sequence number and acknowledgment number are within window) MUST be undertaken before processing any MPTCP signals, as described in <xref target="RFC5961"/>, and initial subfow sequence numbers SHOULD be generated according to the recommendations in <xref target="RFC6528"/>.</t>
      
      <section title="Connection Initiation" anchor="sec_init">
        <t>Connection initiation begins with a SYN, SYN/ACK, ACK exchange
        on a single path. Each packet
        contains the Multipath Capable (MP_CAPABLE) MPTCP option
        (<xref target="tcpm_capable"/>). This option declares its
        sender is capable of performing Multipath TCP and wishes to do
        so on this particular connection.</t>

        <t>The MP_CAPABLE exchange in this specification (v1) is different to
        that specified in v0 <xref target="RFC6824"/>.  If a host supports multiple versions
        of MPTCP, the sender of the MP_CAPABLE option SHOULD signal the
        highest version number it supports.  The passive opener, on receipt
        of this, will signal the version number it wishes to use, which MUST
        be equal to or lower than the version number indicated in the initial
        MP_CAPABLE.
        There is a caveat though with respect to this version negotiation with
        old listeners that only support v0. A listener that supports v0 expects that
        the MP_CAPABLE option in the SYN-segment includes the initiator's key. If
	the initiator however already upgraded to v1, it won't include the key in the
        SYN-segment. Thus, the listener will ignore the MP_CAPABLE of this
        SYN-segment and reply with a SYN/ACK that does not include an MP_CAPABLE,
	thus leading to a fallback to regular TCP.
	An initiator MAY cache this information about a peer and for future
	connections, MAY choose to attempt using MPTCP v0, if supported, before
	recording the host as not supporting MPTCP.</t>

        <t>The MP_CAPABLE option is variable-length, with different fields
        included depending on which packet the option is used on. The full 
        MP_CAPABLE option is shown in <xref target="tcpm_capable"/>.</t>

        <?rfc needLines='10'?>
        <figure align="center" anchor="tcpm_capable" title="Multipath Capable (MP_CAPABLE) Option">
          <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-------+---------------+
   |     Kind      |    Length     |Subtype|Version|A|B|C|D|E|F|G|H|
   +---------------+---------------+-------+-------+---------------+
   |                   Option Sender's Key (64 bits)               |
   |                      (if option Length > 4)                   |
   |                                                               |
   +---------------------------------------------------------------+
   |                  Option Receiver's Key (64 bits)              |
   |                      (if option Length > 12)                  |
   |                                                               |
   +-------------------------------+-------------------------------+
   |  Data-Level Length (16 bits)  |  Checksum (16 bits, optional) |
   +-------------------------------+-------------------------------+
            ]]></artwork>
        </figure>

        <t>The MP_CAPABLE option is carried on the SYN, SYN/ACK, and ACK packets that start the first subflow of an MPTCP connection, as well as the first packet that carries data, if the initiator wishs to send first. The data carried by each option is as follows, where A = initiator and B = listener.
          <list style="symbols">
            <t>SYN (A-&gt;B): only the first four octets (Length = 4).</t>
            <t>SYN/ACK (B-&gt;A): B's Key for this connection (Length = 12).</t>
            <t>ACK (no data) (A-&gt;B): A's Key followed by B's Key (Length = 20).</t>
            <t>ACK (with first data) (A-&gt;B): A's Key followed by B's Key followed by Data-Level Length, and optional Checksum (Length = 22 or 24).</t>
          </list>
        The contents of the option is determined by the SYN and ACK flags of the packet, along with the option's length field. For the diagram shown in <xref target="tcpm_capable"/>, "sender" and "receiver" refer to the sender or receiver of the TCP packet (which can be either host).</t>

        <t>The initial SYN, containing just the MP_CAPABLE header, is used
        to define the version of MPTCP being requested, as well as exchanging
        flags to negotiate connection features, described later.</t>
        
        <t>This option is used to declare the 64-bit keys that the end hosts have generated for this MPTCP connection. These keys are used to authenticate the addition of future subflows to this connection. This is the only time the key will be sent in clear on the wire (unless "fast close", <xref target="sec_fastclose"/>, is used); all future subflows will identify the connection using a 32-bit "token". This token is a cryptographic hash of this key. The algorithm for this process is dependent on the authentication algorithm selected; the method of selection is defined later in this section.</t>
        
        <t>Upon reception of the initial SYN-segment, a stateful server generates a random key and replies with a SYN/ACK. The key's method of generation is implementation specific. The key MUST be hard to guess, and it MUST be unique for the sending host at any one time. Recommendations for generating random numbers for use in keys are given in <xref target="RFC4086"/>. Connections will be indexed at each host by the token (a one-way hash of the key). Therefore, an implementation will require a mapping from each token to the corresponding connection, and in turn to the keys for the connection.</t>

        <t>There is a risk that two different keys will hash to the same token. The risk of hash collisions is usually small, unless the host is handling many tens of thousands of connections. Therefore, an implementation SHOULD check its list of connection tokens to ensure there is not a collision before sending its key, and if there is, then it should generate a new key. This would, however, be costly for a server with thousands of connections. The subflow handshake mechanism (<xref target="sec_join"/>) will ensure that new subflows only join the correct connection, however, through the cryptographic handshake, as well as checking the connection tokens in both directions, and ensuring sequence numbers are in-window. So in the worst case if there was a token collision, the new subflow would not succeed, but the MPTCP connection would continue to provide a regular TCP service.</t>

        <t>Since key generation is implementation-specific, there is no	requirement that they be simply random numbers. An implemention is free to exchange cryptographic material out-of-band and generate these keys from this, in order to provide additional mechanisms by which to verify the identity of the communicating entities. For example, an implementation could choose to link its MPTCP keys to those used in higher-layer TLS or SSH connections.</t>

        <t>If the server behaves in a
        stateless manner, it has to generate its own key in a verifiable
        fashion.  This verifiable way of generating the key can be done by
        using a hash of the 4-tuple, sequence number and a local secret
        (similar to what is done for the TCP-sequence number <xref target="RFC4987"/>).
        It will thus be able to verify whether it is indeed the originator of
        the key echoed back in the later MP_CAPABLE option.  
        As for a stateful server, the tokens SHOULD be checked for uniqueness, however 
        if uniqueness is not met, and there is no way to generate an alternative verifiable
        key, then the connection MUST fall back to using regular TCP by not sending a
        MP_CAPABLE in the SYN/ACK.</t>

        <t>The ACK carries both A's key and B's key. This is the first time that A's key is seen on the wire, although it is expected that A will have generated a key locally before the initial SYN. The echoing of B's key allows B to operate statelessly, as described above. Therefore, A's key must be delivered reliably to B, and in order to do this, the transmission of this packet must be made reliable.</t>

        <t>If B has data to send first, then the reliable delivery of the ACK+MP_CAPABLE can be inferred by the receipt of this data with a MPTCP Data Sequence Signal (DSS) option (<xref target="sec_generalop"/>). If, however, A wishes to send data first, it has two options to ensure the reliable delivery of the ACK+MP_CAPABLE. If it immediately has data to send, then the third ACK (with data) would also contain an MP_CAPABLE option with additional data parameters (the Data-Level Length and optional Checksum as shown in <xref target="tcpm_capable"/>). If A does not immediately have data to send, it MUST include the MP_CAPABLE on the third ACK, but without the additional data parameters. When A does have data to send, it must repeat the sending of the MP_CAPABLE option from the third ACK, with additional data parameters. This MP_CAPABLE option is in place of the DSS, and simply specifies the data-level length of the payload, and the checksum (if the use of checksums is negotiated). This is the minimal data required to establish a MPTCP connection - it allows validation of the payload, and given it is the first data, the Initial Data Sequence Number (IDSN) is also known (as it is generated from the key, as described below). Conveying the keys on the first data packet allows the TCP reliability mechanisms to ensure the packet is successfully delivered. The receiver will acknowledge this data a the connection level with a Data ACK, as if a DSS option has been received.</t>

        <t>There could be situations where both A and B attempt to transmit initial data at the same time. For example, if A did not initially have data to send, but then needed to transmit data before it had received anything from B, it would use a MP_CAPABLE option with data parameters (since it would not know if the MP_CAPABLE on the ACK was received). In such a situation, B may also have transmitted data with a DSS option, but it had not yet been received at A. Therefore, B has received data with a MP_CAPABLE mapping after it has sent data with a DSS option. To ensure these situations can be handled, it follows that the data parameters in a MP_CAPABLE are semantically equivalent to those in a DSS option and can be used interchangeably. Similar situations could occur when the MP_CAPABLE with data is lost and retransmitted. Furthermore, in the case of TCP Segmentation Offloading, the MP_CAPABLE with data parameters may be duplicated across multiple packets, and implementations must also be able to cope with duplicate MP_CAPABLE mappings as well as duplicate DSS mappings.</t>

        <t>Additionally, the MP_CAPABLE exchange allows the safe passage of MPTCP options on SYN packets to be determined. If any of these options are dropped, MPTCP will gracefully fall back to regular single-path TCP, as documented in <xref target="sec_fallback"/>.  If at any point in the handshake either party thinks the MPTCP negotiation is compromised, for example by a middlebox corrupting the TCP options, or unexpected ACK numbers being present, the host MUST stop using MPTCP and no longer include MPTCP options in future TCP packets. The other host will then also fall back to regular TCP using the fall back mechanism.  Note that new subflows MUST NOT be established (using the process documented in <xref target="sec_join"/>) until a Data Sequence Signal (DSS) option has been successfully received across the path (as documented in <xref target="sec_generalop"/>).</t>

        <t>Like all MPTCP options, the MP_CAPABLE option starts with the Kind and Length to specify the TCP-option kind and its length. Followed by that is the MP_CAPABLE option. The first 4 bits of the first octet in the MP_CAPABLE option (<xref target="tcpm_capable"/>) define the MPTCP option subtype (see <xref target="IANA"/>; for MP_CAPABLE, this is 0x0), and the remaining 4 bits of this octet specify the MPTCP version in use (for this specification, this is 1).</t>
       
        <t>The second octet is reserved for flags, allocated as follows:

        <list style="hanging">
          <t hangText="A:"> The leftmost bit, labeled "A", SHOULD be set to 1 to indicate "Checksum Required", unless the system administrator has decided that checksums are not required (for example, if the environment is controlled and no middleboxes exist that might adjust the payload).</t>
          <t hangText="B:"> The second bit, labeled "B", is an extensibility flag, and MUST be set to 0 for current implementations. This will be used for an extensibility mechanism in a future specification, and the impact of this flag will be defined at a later date. If receiving a message with the 'B' flag set to 1, and this is not understood, then the MP_CAPABLE in this SYN MUST be silently ignored, which triggers a fallback to regular TCP; the sender is expected to retry with a format compatible with this legacy specification. Note that the length of the MP_CAPABLE option, and the meanings of bits "C" through "H", may be altered by setting B=1.</t>
          <t hangText="C:"> The third bit, labeled "C", is set to "1" to indicate that the sender of this option will not accept additional MPTCP subflows to the source address and port, and therefore the receiver MUST NOT try to open any additional subflows towards this address and port. This is an efficiency improvement for situations where the sender knows a restriction is in place, for example if the sender is behind a strict NAT, or operating behind a legacy Layer 4 load balancer.</t>
          <t hangText="D through H:"> The remaining bits, labeled "D" through "H", are used for crypto algorithm negotiation.  Currently only the rightmost bit, labeled "H", is assigned.  Bit "H" indicates the use of HMAC-SHA256 (as defined in <xref target="sec_join"/>).  An implementation that only supports this method MUST set bit "H" to 1, and bits "D" through "G" to 0.</t>
        </list>

        A crypto algorithm MUST be specified.  If flag bits D through H are all 0, the MP_CAPABLE option MUST be treated as invalid and ignored (that is, it must be treated as a regular TCP handshake).</t>

        <t>The selection of the authentication algorithm also impacts the algorithm used to generate the token and the Initial Data Sequence Number (IDSN). In this specification, with only the SHA-256 algorithm (bit "H") specified and selected, the token MUST be a truncated (most significant 32 bits) SHA-256 hash (<xref target="SHS"/>, <xref target="RFC6234"/>) of the key. A different, 64-bit truncation (the least significant 64 bits) of the SHA-256 hash of the key MUST be used as the IDSN. Note that the key MUST be hashed in network byte order. Also note that the "least significant" bits MUST be the rightmost bits of the SHA-256 digest, as per <xref target="SHS"/>. Future specifications of the use of the crypto bits may choose to specify different algorithms for token and IDSN generation.</t>

        <t>Both the crypto and checksum bits negotiate capabilities in similar ways. For the Checksum Required bit (labeled "A"), if either host requires the use of checksums, checksums MUST be used. In other words, the only way for checksums not to be used is if both hosts in their SYNs set A=0. This decision is confirmed by the setting of the "A" bit in the third packet (the ACK) of the handshake. For example, if the initiator sets A=0 in the SYN, but the responder sets A=1 in the SYN/ACK, checksums MUST be used in both directions, and the initiator will set A=1 in the ACK. The decision whether to use checksums will be stored by an implementation in a per-connection binary state variable. If A=1 is received by a host that does not want to use checksums, it MUST fall back to regular TCP by ignoring the MP_CAPABLE option as if it was invalid.</t>

        <t>For crypto negotiation, the responder has the choice. The initiator creates a proposal setting a bit for each algorithm it supports to 1 (in this version of the specification, there is only one proposal, so bit "H" will be always set to 1). The responder responds with only 1 bit set -- this is the chosen algorithm. The rationale for this behavior is that the responder will typically be a server with potentially many thousands of connections, so it may wish to choose an algorithm with minimal computational complexity, depending on the load. If a responder does not support (or does not want to support) any of the initiator's proposals, it can respond without an MP_CAPABLE option, thus forcing a fallback to regular TCP.</t>

        <t>The MP_CAPABLE option is only used in the first subflow of a connection, in order to identify the connection; all following subflows will use the "Join" option (see <xref target="sec_join"/>) to join the existing connection.</t>
        <t>If a SYN contains an MP_CAPABLE option but the
        SYN/ACK does not, it is assumed that the passive opener is not
        multipath capable; thus, the MPTCP session MUST operate as
        a regular, single-path TCP. If a SYN does not contain a
        MP_CAPABLE option, the SYN/ACK MUST NOT contain one
        in response. If the third packet (the ACK) does not contain
        the MP_CAPABLE option, then the session MUST fall back to
        operating as a regular, single-path TCP. This is to maintain
        compatibility with middleboxes on the path that drop some 
        or all TCP options. Note that an implementation MAY choose
        to attempt sending MPTCP options more than one time before 
        making this decision to operate as regular TCP (see
        <xref target="heuristics"/>).</t>

        <t>If the SYN packets are unacknowledged, it is up to local
        policy to decide how to respond. It is expected that a sender
        will eventually fall back to single-path TCP (i.e., without the
        MP_CAPABLE option) in order to work around middleboxes that
        may drop packets with unknown options; however, the number of
        multipath-capable attempts that are made first will be up to
        local policy.  
        It is possible that MPTCP and non-MPTCP SYNs could get reordered
        in the network. Therefore, the final state is inferred from the
        presence or absence of the MP_CAPABLE option in the third packet
        of the TCP handshake.  If this option is not present, the 
        connection SHOULD fall back to regular TCP, as documented in 
        <xref target="sec_fallback"/>.</t>

        <t>The initial data sequence number on an MPTCP connection 
        is generated from the key. The algorithm for IDSN generation is
        also determined from the negotiated authentication algorithm.
        In this specification, with only the SHA-256 algorithm specified and
        selected, the IDSN of a host MUST be the least significant 64 bits of the
        SHA-256 hash of its key, i.e., IDSN-A = Hash(Key-A) and IDSN-B = Hash(Key-B). 
        This deterministic generation of the IDSN allows a receiver to ensure 
        that there are no gaps in sequence space at the start of the connection. 
        The SYN with MP_CAPABLE occupies the first octet of data sequence space, 
        although this does not need to be acknowledged at the connection level 
        until the first data is sent (see <xref target="sec_generalop"/>).</t>
      </section>

      <section title="Starting a New Subflow" anchor="sec_join">
        <t>Once an MPTCP connection has begun with the MP_CAPABLE
        exchange, further subflows can be added to the connection.
        Hosts have knowledge of their own address(es), and can
        become aware of the other host's addresses through
        signaling exchanges as described in
        <xref target="sec_pm"/>. Using this knowledge, a host
        can initiate a new subflow over a currently unused pair of
        addresses. It is permitted for either host in a connection
        to initiate the creation of a new subflow, but it is expected
        that this will normally be the original connection initiator
        (see <xref target="heuristics"/> for heuristics).</t>

        <t>A new subflow is started as a normal TCP SYN/ACK
        exchange. The Join Connection (MP_JOIN) MPTCP option
        is used to identify the connection to be joined by the new subflow.  
        It uses keying material that was exchanged in the initial MP_CAPABLE
        handshake (<xref target="sec_init"/>), and that handshake also
        negotiates the crypto algorithm in use for the MP_JOIN handshake.</t>

        <t>This section specifies the behavior of MP_JOIN using the HMAC-SHA256 
        algorithm. An MP_JOIN option is present in the SYN, SYN/ACK, 
        and ACK of the three-way handshake, although in each case with a 
        different format.</t>

        <t>In the first MP_JOIN on the SYN packet, illustrated in 
        <xref target="tcpm_join"/>, the initiator sends a token, random
        number, and address ID.</t>

        <t>The token is used to identify the MPTCP connection and is a
        cryptographic hash of the receiver's key, as exchanged 
        in the initial MP_CAPABLE handshake (<xref target="sec_init"/>).  
        In this specification, the tokens presented in this 
        option are generated by the SHA-256 (<xref target="SHS"/>, <xref target="RFC6234"/>) 
        algorithm, truncated to the most significant 32 bits.  The token
        included in the MP_JOIN option is the token that the receiver
        of the packet uses to identify this connection; i.e., Host A 
        will send Token-B (which is generated from Key-B). Note that the
        hash generation algorithm can be overridden by the choice of 
        cryptographic handshake algorithm, as defined in <xref target="sec_init"/>.</t>

        <t>The MP_JOIN SYN sends not only the token (which is static for a 
        connection) but also random numbers (nonces) that are used to prevent 
        replay attacks on the authentication method. Recommendations for the 
        generation of random numbers for this purpose are given in <xref target="RFC4086"/>.</t>
        
        <t>The MP_JOIN option includes an "Address ID".  This is an
        identifier that only has significance within a single connection,
        where it identifies the source address of this packet, even if
        the IP header has been changed in transit by a middlebox. 
        The Address ID allows address removal (<xref target="sec_remove_addr"/>) 
        without needing to know what the source address at the 
        receiver is, thus allowing address removal through NATs.
        The Address ID also allows correlation between new subflow setup attempts          
        and address signaling (<xref target="sec_add_address"/>),          
        to prevent setting up duplicate subflows on the same path, if an MP_JOIN
        and ADD_ADDR are sent at the same time.</t>

        <t>The Address IDs of the subflow used in the initial SYN
        exchange of the first subflow in the connection are implicit,
        and have the value zero. A host MUST store the mappings between
        Address IDs and addresses both for itself and the remote host.
        An implementation will also need to know which local and remote
        Address IDs are associated with which established subflows, for 
        when addresses are removed from a local or remote host.</t>
       
        <t>The MP_JOIN option on packets with the SYN flag set also includes 4 bits of flags, 3 of which are currently reserved and MUST be set to zero by the sender. The final bit, labeled "B", indicates whether the sender of this option wishes this subflow to be used as a backup path (B=1) in the event of failure of other paths, or whether it wants it to be used as part of the connection immediately. By setting B=1, the sender of the option is requesting the other host to only send data on this subflow if there are no available subflows where B=0. Subflow policy is discussed in more detail in <xref target="sec_policy"/>.</t>

        <?rfc needLines='10'?>
        <figure align="center" anchor="tcpm_join" title="Join Connection (MP_JOIN) Option (for Initial SYN)">
          <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-----+-+---------------+
   |     Kind      |  Length = 12  |Subtype|     |B|   Address ID  |
   +---------------+---------------+-------+-----+-+---------------+
   |                   Receiver's Token (32 bits)                  |
   +---------------------------------------------------------------+
   |                Sender's Random Number (32 bits)               |
   +---------------------------------------------------------------+
            ]]></artwork>
        </figure>

        <t>When receiving a SYN with an MP_JOIN option that contains
        a valid token for an existing MPTCP connection, the recipient
        SHOULD respond with a SYN/ACK also containing an MP_JOIN
        option containing a random number and a truncated (leftmost 64 
        bits) Hash-based Message Authentication Code (HMAC). This 
        version of the option is shown in <xref target="tcpm_join2"/>.
        If the token is unknown, or the host wants to refuse subflow
        establishment (for example, due to a limit on the number of
        subflows it will permit), the receiver will send back a reset 
        (RST) signal, analogous to an unknown port in TCP, containing a 
        MP_TCPRST option (<xref target="sec_reset"/>) with an appropriate 
        reason code. Although calculating an HMAC
        requires cryptographic operations, it is believed that the 
        32-bit token in the MP_JOIN SYN gives sufficient protection against blind state 
        exhaustion attacks; therefore, there is no need to provide
        mechanisms to allow a responder to operate statelessly at the 
        MP_JOIN stage.</t>

        <t>An HMAC is sent by both hosts -- by the initiator (Host A)
        in the third packet (the ACK) and by the responder (Host B) in
        the second packet (the SYN/ACK). Doing the HMAC exchange at this
        stage allows both hosts to have first exchanged random data (in the 
        first two SYN packets) that is used as the "message". This
        specification defines that HMAC as defined in <xref target="RFC2104"/>
        is used, along with the SHA-256 hash algorithm <xref target="SHS"/> 
        (potentially implemented as in <xref target="RFC6234"/>), thus generating a 160-bit / 20-octet HMAC. Due to option space limitations, the HMAC included in 
        the SYN/ACK is truncated to the leftmost 64 bits, but this is 
        acceptable since random numbers are used; thus, an attacker 
        only has one chance to guess the HMAC correctly (if the HMAC is
        incorrect, the TCP connection is closed, so a new MP_JOIN negotiation 
        with a new random number is required).</t>
        
        <t>The initiator's authentication information is sent in its 
        first ACK (the third packet of the handshake), as shown in
        <xref target="tcpm_join3"/>. This data needs to be sent reliably,
        since it is the only time this HMAC is sent;
        therefore, receipt of this packet MUST trigger a regular TCP ACK 
        in response, and the packet MUST be retransmitted if this
        ACK is not received. In other words, sending the ACK/MP_JOIN 
        packet places the subflow in the PRE_ESTABLISHED state, and it 
        moves to the ESTABLISHED state only on receipt of an ACK from 
        the receiver. It is not permitted to send data while in the 
        PRE_ESTABLISHED state. The reserved bits in this option MUST be set 
        to zero by the sender.</t>

        <t>The key for the HMAC algorithm, in the case of the message transmitted by Host A, will be Key-A followed by Key-B, and in the case of Host B, Key-B followed by Key-A. These are the keys that were exchanged in the original MP_CAPABLE handshake. The "message" for the HMAC algorithm in each case is the concatenations of random number for each host (denoted by R): for Host A, R-A followed by R-B; and for Host B, R-B followed by R-A.</t>

        <?rfc needLines='10'?>
        <figure align="center" anchor="tcpm_join2" title="Join Connection (MP_JOIN) Option (for Responding SYN/ACK)">
          <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-----+-+---------------+
   |     Kind      |  Length = 16  |Subtype|     |B|   Address ID  |
   +---------------+---------------+-------+-----+-+---------------+
   |                                                               |
   |                Sender's Truncated HMAC (64 bits)              |
   |                                                               |
   +---------------------------------------------------------------+
   |                Sender's Random Number (32 bits)               |
   +---------------------------------------------------------------+
            ]]></artwork>
        </figure>

        <?rfc needLines='12'?>
        <figure align="center" anchor="tcpm_join3" title="Join Connection (MP_JOIN) Option (for Third ACK)">
          <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-----------------------+
   |     Kind      |  Length = 24  |Subtype|      (reserved)       |
   +---------------+---------------+-------+-----------------------+
   |                                                               |
   |                                                               |
   |                   Sender's HMAC (160 bits)                    |
   |                                                               |
   |                                                               |
   +---------------------------------------------------------------+
            ]]></artwork>
        </figure>

        
        <t>These various MPTCP options fit together to enable authenticated subflow setup as illustrated in <xref target="fig_tokens"/>.</t>

        <?rfc needLines='24'?>
        <figure align="center" anchor="fig_tokens" title="Example Use of MPTCP Authentication">
          <artwork align="left"><![CDATA[
           Host A                                  Host B
  ------------------------                       ----------
  Address A1    Address A2                       Address B1
  ----------    ----------                       ----------
      |             |                                |
      |            SYN + MP_CAPABLE(Key-A)           |
      |--------------------------------------------->|
      |<---------------------------------------------|
      |          SYN/ACK + MP_CAPABLE(Key-B)         |
      |             |                                |
      |        ACK + MP_CAPABLE(Key-A, Key-B)        |
      |--------------------------------------------->|
      |             |                                |
      |             |   SYN + MP_JOIN(Token-B, R-A)  |
      |             |------------------------------->|
      |             |<-------------------------------|
      |             | SYN/ACK + MP_JOIN(HMAC-B, R-B) |
      |             |                                |
      |             |     ACK + MP_JOIN(HMAC-A)      |
      |             |------------------------------->|
      |             |<-------------------------------|
      |             |             ACK                |

HMAC-A = HMAC(Key=(Key-A+Key-B), Msg=(R-A+R-B))
HMAC-B = HMAC(Key=(Key-B+Key-A), Msg=(R-B+R-A))
            ]]></artwork>
        </figure>

        <t>If the token received at Host B is unknown or local policy 
        prohibits the acceptance of the new subflow, the recipient MUST 
        respond with a TCP RST for the subflow, with a MP_TCPRST option
        (<xref target="sec_reset"/>) with an appropriate reason code.</t>

        <t>If the token is accepted at Host B, but the HMAC returned to
        Host A does not match the one expected, Host A MUST close the 
        subflow with a TCP RST. In this, and all following cases of sending
        a RST in this section, the sender SHOULD send a MP_TCPRST option
        (<xref target="sec_reset"/>) on this RST packet with the reason
        code for a "MPTCP specific error".</t>

        <t>If Host B does not receive the expected HMAC, or the MP_JOIN
        option is missing from the ACK, it MUST close the subflow with a 
        TCP RST with a MP_TCPRST (<xref target="sec_reset"/>) option with
        the reason code for "MPTCP specific error".</t>

        <t>If the HMACs are verified as correct, then both hosts have
        authenticated each other as being the same peers as existed at
        the start of the connection, and they have agreed of which 
        connection this subflow will become a part.</t>

        <t>If the SYN/ACK as received at Host A does not have an MP_JOIN
        option, Host A MUST close the subflow with a TCP RST with a 
        MP_TCPRST (<xref target="sec_reset"/>) option with the reason 
        code for "MPTCP specific error".</t>

        <t>This covers all cases of the loss of an MP_JOIN. In more detail,
        if MP_JOIN is stripped from the SYN on the path from A to
        B, and Host B does not have a passive opener on the relevant
        port, it will respond with a RST in the normal way.  If in
        response to a SYN with an MP_JOIN option, a SYN/ACK is
        received without the MP_JOIN option (either since it was
        stripped on the return path, or it was stripped on the
        outgoing path but the passive opener on Host B responded as if
        it were a new regular TCP session), then the subflow is
        unusable and Host A MUST close it with a RST.</t>

        <t>Note that additional subflows can be created
        between any pair of ports (but see <xref target="heuristics"/> for
        heuristics); no explicit application-level accept calls or
        bind calls are required to open additional subflows. To
        associate a new subflow with an existing connection, the token
        supplied in the subflow's SYN exchange is used for
        demultiplexing.  This then binds the 5-tuple of the TCP
        subflow to the local token of the connection. A consequence is
        that it is possible to allow any port pairs to be used for a
        connection. </t>

        <t>Demultiplexing subflow SYNs MUST be done using the token;
        this is unlike traditional TCP, where the destination port is
        used for demultiplexing SYN packets.  Once a subflow is set up,
        demultiplexing packets is done using the 5-tuple, as in
        traditional TCP. The 5-tuples will be mapped to the local
        connection identifier (token). Note that Host A will know its
        local token for the subflow even though it is not sent on the
        wire -- only the responder's token is sent.</t>
      </section>

      <section title="General MPTCP Operation" anchor="sec_generalop">
        <t>This section discusses operation of MPTCP for data transfer. At a high level, an MPTCP implementation will take one input data stream from an application, and split it into one or more subflows, with sufficient control information to allow it to be reassembled and delivered reliably and in order to the recipient application. The following subsections define this behavior in detail.</t>

        <t>The data sequence mapping and the Data ACK are signaled in the Data Sequence Signal (DSS) option (<xref target="tcpm_dsn"/>). Either or both can be signaled in one DSS, depending on the flags set. The data sequence mapping defines how the sequence space on the subflow maps to the connection level, and the Data ACK acknowledges receipt of data at the connection level. These functions are described in more detail in the following two subsections.</t>

        <?rfc needLines='18'?>
        <figure align="center" anchor="tcpm_dsn" title="Data Sequence Signal (DSS) Option">
          <artwork align="left"><![CDATA[
                       1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +---------------+---------------+-------+----------------------+
  |     Kind      |    Length     |Subtype| (reserved) |F|m|M|a|A|
  +---------------+---------------+-------+----------------------+
  |           Data ACK (4 or 8 octets, depending on flags)       |
  +--------------------------------------------------------------+
  |   Data sequence number (4 or 8 octets, depending on flags)   |
  +--------------------------------------------------------------+
  |              Subflow Sequence Number (4 octets)              |
  +-------------------------------+------------------------------+
  |  Data-Level Length (2 octets) |      Checksum (2 octets)     |
  +-------------------------------+------------------------------+
          ]]></artwork>
        </figure>

        <t>The flags, when set, define the contents of this option, as follows:

          <list style="symbols">
            <t>A = Data ACK present</t>
            <t>a = Data ACK is 8 octets (if not set, Data ACK is 4 octets)</t>
            <t>M = Data Sequence Number (DSN), Subflow Sequence Number (SSN), Data-Level Length, and Checksum present</t>
            <t>m = Data sequence number is 8 octets (if not set, DSN is 4 octets)</t>
          </list>

        The flags 'a' and 'm' only have meaning if the corresponding 'A' or 'M' flags are set; otherwise, they will be ignored. The maximum length of this option, with all flags set, is 28 octets.</t>

        <t>The 'F' flag indicates "DATA_FIN". If present, this means that this mapping covers the final data from the sender. This is the connection-level equivalent to the FIN flag in single-path TCP. A connection is not closed unless there has been a DATA_FIN exchange or a timeout. The purpose of the DATA_FIN and the interactions between this flag, the subflow-level FIN flag, and the data sequence mapping are described in <xref target="sec_close"/>.
        The remaining reserved bits MUST be set to zero by an implementation of this specification.</t>

        <t>Note that the checksum is only present in this option if the use of MPTCP checksumming has been negotiated at the MP_CAPABLE handshake (see <xref target="sec_init"/>). The presence of the checksum can be inferred from the length of the option. If a checksum is present, but its use had not been negotiated in the MP_CAPABLE handshake, the checksum field MUST be ignored. If a checksum is not present when its use has been negotiated, the receiver MUST close the subflow with a RST as it is considered broken. This RST SHOULD be accompanied with a MP_TCPRST option (<xref target="sec_reset"/>) with the reason code for a "MPTCP specific error".</t>
        
        <section title="Data Sequence Mapping" anchor="sec_dsn">

          <t>The data stream as a whole can be reassembled through the use of the data sequence mapping components of the DSS option (<xref target="tcpm_dsn"/>), which define the 
mapping from the subflow sequence number to the data sequence number. This is used by the receiver to ensure in-order delivery to the application layer. Meanwhile, the subflow-level sequence numbers (i.e., the regular sequence numbers in the TCP header) have subflow-only relevance. It is expected (but not mandated) that SACK <xref target='RFC2018'/> is used at the subflow level to improve efficiency.</t>

        <t>The data sequence mapping specifies a mapping from subflow sequence space to data sequence space. This is expressed in terms of starting sequence numbers for the subflow and the data level, and a length of bytes for which this mapping is valid.
This explicit mapping for a range of data was chosen rather than per-packet signaling to assist with compatibility with situations where TCP/IP segmentation or coalescing is undertaken separately from the stack that is generating the data flow (e.g., through the use of TCP segmentation offloading on network interface cards, or by middleboxes such as performance enhancing proxies). It also allows a single mapping to cover many packets, which may be useful in bulk transfer situations.</t>

        <t>A mapping is fixed, in that the subflow sequence number is bound to the data sequence number after the mapping has been processed. A sender MUST NOT change this mapping
after it has been declared; however, the same data sequence number can be mapped to by different subflows for retransmission purposes (see <xref target="sec_retransmit"/>). This would also permit the same data to be sent simultaneously on multiple subflows for resilience or efficiency purposes, especially in the case of lossy links. Although the detailed specification of such operation is outside the scope of this document, an implementation SHOULD treat the first data that is received at a subflow for the data sequence space as that which should be delivered to the application, and any later data for that sequence space ignored.</t>

        <t>The data sequence number is specified as an absolute value, whereas the subflow sequence numbering is relative (the SYN at the start of the subflow has relative subflow sequence number 0). This is to allow middleboxes to change the initial sequence number of a subflow, such as firewalls that undertake ISN randomization.</t>

        <t>The data sequence mapping also contains a checksum of the data that this mapping covers, if use of checksums has been negotiated at the MP_CAPABLE exchange. Checksums are used to detect if the payload has been adjusted in any way by a non-MPTCP-aware middlebox. If this checksum fails, it will trigger a failure of the subflow, or a fallback to regular TCP, as documented in <xref target="sec_fallback"/>, since MPTCP can no longer reliably know the subflow sequence space at the receiver to build data sequence mappings.</t>

        <t>The checksum algorithm used is the standard TCP checksum <xref target="RFC0793"/>, operating over the data covered by this mapping, along with a pseudo-header as shown in <xref target="fig_pseudo"/>.</t>
        
        <?rfc needLines='18'?>
        <figure align="center" anchor="fig_pseudo" title="Pseudo-Header for DSS Checksum">
          <artwork align="left"><![CDATA[
                       1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +--------------------------------------------------------------+
  |                                                              |
  |                Data Sequence Number (8 octets)               |
  |                                                              |
  +--------------------------------------------------------------+
  |              Subflow Sequence Number (4 octets)              |
  +-------------------------------+------------------------------+
  |  Data-Level Length (2 octets) |        Zeros (2 octets)      |
  +-------------------------------+------------------------------+
          ]]></artwork>
        </figure>

        <t>Note that the data sequence number used in the pseudo-header is always the 64-bit value, irrespective of what length is used in the DSS option itself. The standard TCP checksum algorithm has been chosen since it will be calculated anyway for the TCP subflow, and if calculated first over the data before adding the pseudo-headers, it only needs to be calculated once. Furthermore, since the TCP checksum is additive, the checksum for a DSN_MAP can be constructed by simply adding together the checksums for the data of each constituent TCP segment, and adding the checksum for the DSS pseudo-header.</t>
        
        <t>Note that checksumming relies on the TCP subflow containing contiguous data; therefore, a TCP subflow MUST NOT use the Urgent Pointer to interrupt an existing mapping. Further note, however, that if Urgent data is received on a subflow, it SHOULD be mapped to the data sequence space and delivered to the application analogous to Urgent data in regular TCP.</t>

        <t>To avoid possible deadlock scenarios, subflow-level
        processing should be undertaken separately from that at
        connection level. Therefore, even if a mapping does not exist
        from the subflow space to the data-level space, the data
        SHOULD still be ACKed at the subflow (if it is in-window). 
        This data cannot, however, be acknowledged at the data level
        (<xref target="sec_dataack"/>) because its data sequence
        numbers are unknown. Implementations MAY hold onto such
        unmapped data for a short while in the expectation that a
        mapping will arrive shortly.  Such unmapped data cannot be
        counted as being within the connection level receive window because this is
        relative to the data sequence numbers, so if the receiver runs
        out of memory to hold this data, it will have to be discarded.
        If a mapping for that subflow-level sequence space does not
        arrive within a receive window of data, that subflow SHOULD be
        treated as broken, closed with a RST, and any unmapped data
        silently discarded.</t>

        <t>Data sequence numbers are always 64-bit quantities, and
        MUST be maintained as such in implementations.  If a
        connection is progressing at a slow rate, so protection
        against wrapped sequence numbers is not required, 
        then an implementation MAY include just the lower 32
        bits of the data sequence number in the data sequence mapping and/or
        Data ACK as an optimization, and an implementation can make this choice
        independently for each packet. An implementaton MUST be able to receive
        and process both 64-bit or 32-bit sequence number values, but it is not 
        required that an implementation is able to send both.</t>
        
        <t>An implementation MUST send the full 64-bit data sequence number 
        if it is transmitting at a sufficiently high rate that the 32-bit value 
        could wrap within the Maximum Segment Lifetime 
        (MSL) <xref target="RFC1323"/>. The lengths of the DSNs used in these
        values (which may be different) are declared with flags in the
        DSS option.  Implementations MUST accept a 32-bit DSN and implicitly
        promote it to a 64-bit quantity by incrementing the upper 32
        bits of sequence number each time the lower 32
        bits wrap. A sanity check MUST be implemented to ensure that
        a wrap occurs at an expected time (e.g., the sequence number jumps
        from a very high number to a very low number) and is not triggered 
        by out-of-order packets.</t>

        <t>As with the standard TCP sequence number, the data sequence
        number should not start at zero, but at a random value to make
        blind session hijacking harder. This specification requires
        setting the initial data sequence number (IDSN) of each host to the 
        least significant 64 bits of the SHA-256 hash of the host's key, as
        described in <xref target="sec_init"/>. This is required also in
        order for the receiver to know what the expected IDSN is, and thus
        determine if any initial connection-level packets are missing; this 
        is particularly relevant if two subflows start transmitting simultaneously.</t>

        <t>A data sequence mapping does not need to be included in
        every MPTCP packet, as long as the subflow sequence space in
        that packet is covered by a mapping known at the receiver. This
        can be used to reduce overhead in cases where the mapping is
        known in advance; one such case is when there is a single
        subflow between the hosts, another is when segments of
        data are scheduled in larger than packet-sized chunks.</t>
        
        <t>An "infinite" mapping can be used to fall back to regular TCP by
        mapping the subflow-level data to the connection-level data
        for the remainder of the connection (see
        <xref target="sec_fallback"/>). This is achieved by setting
        the Data-Level Length field of the DSS option to the reserved value of 0. The
        checksum, in such a case, will also be set to zero.</t>
      </section>

      <section title="Data Acknowledgments" anchor="sec_dataack">
        <t>To provide full end-to-end resilience, MPTCP provides a
        connection-level acknowledgment, to act as a cumulative ACK for
        the connection as a whole. This is the "Data ACK" field of 
        the DSS option (<xref target="tcpm_dsn"/>). The Data ACK
        is analogous to the behavior
        of the standard TCP cumulative ACK -- indicating
        how much data has been successfully received (with no
        holes). This is in comparison to the subflow-level ACK, which
        acts analogous to TCP SACK, given that there may still be
        holes in the data stream at the connection level.
        The Data ACK specifies the next data sequence number 
        it expects to receive.</t>

        <t>The Data ACK, as for the DSN, can be sent as the full 64-bit
        value, or as the lower 32 bits.  If data is received with a 64-bit DSN, 
        it MUST be acknowledged with a 64-bit Data ACK.  If
        the DSN received is 32 bits, it is valid for the implementation 
        to choose whether to send a 32-bit or 64-bit Data ACK.</t>

        <t>The Data ACK proves that the data, and all required MPTCP
        signaling, has been received and accepted by the remote end.
        One key use of the Data ACK signal is that it is used to indicate
        the left edge of the advertised receive window. As explained in
        <xref target="sec_rwin"/>, the receive window is shared by all
        subflows and is relative to the Data ACK. Because of this, an
        implementation MUST NOT use the RCV.WND field of a TCP segment
        at the connection level if it does not also carry a DSS option with
        a Data ACK field. Furthermore,
        separating the connection-level acknowledgments from the
        subflow level allows processing to be done separately, and
        a receiver has the freedom to drop segments after acknowledgment 
        at the subflow level, for example, due to memory constraints
        when many segments arrive out of order.</t>

        <t>An MPTCP sender MUST NOT free data from the send buffer until 
        it has been acknowledged by both a Data ACK received on any subflow 
        and at the subflow level by all subflows on which the data was sent.  
        The former condition ensures liveness of the
        connection and the latter condition ensures liveness and
        self-consistence of a subflow when data needs to be
        retransmitted.
        Note, however, that if some data needs to be retransmitted multiple
        times over a subflow, there is a risk of blocking the sending
        window. In this case, the MPTCP sender can decide to terminate the
        subflow that is behaving badly by sending a RST, using an appropriate
        MP_TCPRST (<xref target="sec_reset"/>) error code.</t>

        <t>The Data ACK MAY be included in all segments; however, optimizations 
        SHOULD be considered in more advanced implementations, where the
        Data ACK is present in segments 
        only when the Data ACK value advances, and this behavior MUST
        be treated as valid. This behavior ensures the sender buffer 
        is freed, while reducing overhead when the data transfer is 
        unidirectional.</t>
      </section>

      <section title="Closing a Connection" anchor="sec_close">
        <t>In regular TCP, a FIN announces the receiver that the sender has no more data to send. 
In order to allow subflows to operate independently and to keep the appearance of TCP over the wire, 
a FIN in MPTCP only affects the subflow on which it is sent. This 
allows nodes to exercise considerable freedom over which paths are in use at any one time. 
The semantics of a FIN remain as for regular TCP; i.e., it is not until both sides have ACKed 
each other's FINs that the subflow is fully closed.</t>
        <t>When an application calls close() on a socket, this indicates that it has no more 
data to send; for regular TCP, this would result in a FIN on the connection. For MPTCP, an 
equivalent mechanism is needed, and this is referred to as the DATA_FIN.</t>

        <t>A DATA_FIN is an indication that the sender has no more data to send, and 
        as such can be used to verify that all data has been successfully received. A DATA_FIN, 
        as with the FIN on a regular TCP connection, is a unidirectional signal.</t>

        <t>The DATA_FIN is signaled by setting the 'F' flag in the Data Sequence Signal option (<xref target="tcpm_dsn"/>) to 1. A DATA_FIN occupies 1 octet (the final octet) of the connection-level sequence space. Note that the DATA_FIN is included in the Data-Level Length, but not at the subflow level: for example, a segment with DSN 80, and Data-Level Length 11, with DATA_FIN set, would map 10 octets from the subflow into data sequence space 80-89, the DATA_FIN is DSN 90; therefore, this segment including DATA_FIN would be acknowledged with a DATA_ACK of 91.</t>

        <t>Note that when the DATA_FIN is not attached to a TCP segment containing data, the Data Sequence Signal MUST have a subflow sequence number of 0, a Data-Level Length of 1, and the data sequence number that corresponds with the DATA_FIN itself. The checksum in this case will only cover the pseudo-header.</t>
        
        <t>A DATA_FIN has the semantics and behavior as a regular TCP FIN, but at the connection level. Notably, it is only DATA_ACKed once all data has been successfully received at the connection level. Note, therefore, that a DATA_FIN is decoupled from a subflow FIN. It is only permissible to combine these signals on one subflow if there is no data outstanding on other subflows. Otherwise, it may be necessary to retransmit data on different subflows. Essentially, a host MUST NOT close all functioning subflows unless it is safe to do so, i.e., until all outstanding data has been DATA_ACKed, or until the segment with the DATA_FIN flag set is the only outstanding segment.</t>

        <t>Once a DATA_FIN has been acknowledged, all remaining subflows MUST be closed with standard FIN exchanges. Both hosts SHOULD send FINs on all subflows, as a courtesy to allow middleboxes to clean up state even if an individual subflow has failed. It is also encouraged to reduce the timeouts (Maximum Segment Life) on subflows at end hosts. In particular, any subflows where there is still outstanding data queued (which has been retransmitted on other subflows in order to get the DATA_FIN acknowledged) MAY be closed with a RST with MP_TCPRST (<xref target="sec_reset"/>) error code for "too much outstanding data".</t>

        <t>A connection is considered closed once both hosts' DATA_FINs have been acknowledged by DATA_ACKs.</t>
        
        <t>As specified above, a standard TCP FIN on an individual subflow only shuts down the subflow on which it was sent. If all subflows have been closed with a FIN exchange, but no DATA_FIN has been received and acknowledged, the MPTCP connection is treated as closed only after a timeout. This implies that an implementation will have TIME_WAIT states at both the subflow and connection levels (see <xref target="app_fsm"/>). This permits "break-before-make" scenarios where connectivity is lost on all subflows before a new one can be re-established.</t>
      </section>

        <section title="Receiver Considerations" anchor="sec_rwin">
          <t>Regular TCP advertises a receive window in each packet, telling the sender how much data the receiver
is willing to accept past the cumulative ack. The receive window is used to implement flow control, throttling
down fast senders when receivers cannot keep up. </t>

          <t>MPTCP also uses a unique receive window, shared between the subflows. The idea is to allow any
subflow to send data as long as the receiver is willing to accept it. The alternative, maintaining per subflow
receive windows, could end up stalling some subflows while others would not use up their window.</t>

          <t>The receive window is relative to the DATA_ACK. As in TCP, a receiver MUST NOT shrink the right edge of the receive window (i.e., DATA_ACK + receive window). The receiver will
use the data sequence number to tell if a packet should be accepted at the connection level.</t> 

          <t>When deciding to accept packets at subflow level, regular TCP checks
the sequence number in the packet against the allowed receive window. 
With multipath, such a check is done using only the connection-level window. A sanity 
check SHOULD be performed at subflow level to ensure that the subflow and mapped sequence
numbers meet the following test: SSN - SUBFLOW_ACK &lt;= DSN - DATA_ACK, where SSN is the subflow sequence number of the received packet and SUBFLOW_ACK is the RCV.NXT (next expected sequence number) of the subflow (with the equivalent connection-level definitions for DSN and DATA_ACK).</t>

<t>In regular TCP, once a segment is deemed in-window, it is put either 
in the in-order receive queue or in the out-of-order queue. 
In Multipath TCP, the same happens but at the connection level: a segment
is placed in the connection level in-order or out-of-order queue if
it is in-window at both connection and subflow levels. 
The stack still has to remember, for each subflow, which segments were
received successfully so that it can ACK them at subflow level appropriately.
Typically, this will be implemented by keeping per subflow out-of-order
queues (containing only message headers, not the payloads) and remembering 
the value of the cumulative ACK.
</t>

          <t>It is important for implementers to understand how large
          a receiver buffer is appropriate. The lower bound for full
          network utilization is the maximum bandwidth-delay product
          of any one of the paths.  However, this might be insufficient
          when a packet is lost on a slower subflow and needs to be
          retransmitted (see <xref target="sec_retransmit"/>). A tight
          upper bound would be the maximum round-trip time (RTT) of any path multiplied
          by the total bandwidth available across all paths. This
          permits all subflows to continue at full speed while a
          packet is fast-retransmitted on the maximum RTT path. Even
          this might be insufficient to maintain full performance in
          the event of a retransmit timeout on the maximum RTT path.
          It is for future study to determine the relationship between
          retransmission strategies and receive buffer sizing.</t>
        </section>

        <section title="Sender Considerations" anchor="sec_sender">
          <t>The sender remembers receiver window advertisements from the receiver. It should only update its local receive window values when the largest sequence number allowed (i.e., DATA_ACK + receive window) increases, on the receipt of a DATA_ACK. This is important to allow using paths with different RTTs, and thus different feedback loops. </t>

          <t>MPTCP uses a single receive window across all subflows, and if the receive window was guaranteed to be unchanged end-to-end, a host could always read the most recent receive window value. However, some classes of middleboxes may alter the TCP-level receive window. Typically, these will 
shrink the offered window, although for short periods of time it may be possible for the window to be larger (however, 
note that this would not continue for long periods since ultimately the middlebox must keep up with 
delivering data to the receiver). Therefore, if receive window sizes differ on multiple subflows, 
when sending data MPTCP SHOULD take the largest of the most recent window sizes as the one to use in calculations.
This rule is implicit in the requirement not to reduce the right edge of the window.</t>

          <t>The sender MUST also remember the receive windows advertised by each subflow.
The allowed window for subflow i is (ack_i, ack_i + rcv_wnd_i), where ack_i is the
subflow-level cumulative ACK of subflow i. This ensures data will not be sent to a middlebox
unless there is enough buffering for the data. </t>

          <t>Putting the two rules together, we get the following: a sender is allowed to send 
data segments with data-level sequence numbers between (DATA_ACK, DATA_ACK + receive_window).
Each of these segments will be mapped onto subflows, as long as subflow sequence numbers
are in the allowed windows for those subflows. Note that subflow sequence numbers do not
generally affect flow control if the same receive window is advertised across all subflows. 
They will perform flow control for those subflows with a smaller advertised receive window. 
          </t>

          <t>The send buffer MUST, at a minimum, be as big as the receive buffer, to enable the sender to reach maximum throughput.</t>

        </section>

        <section title="Reliability and Retransmissions" anchor="sec_retransmit">

          <t>The data sequence mapping allows senders to resend data with the same data sequence number on a different subflow. When doing this, a host MUST still retransmit the original data on the original subflow, in order to preserve the subflow integrity (middleboxes could replay old data, and/or could reject holes in subflows), and a receiver will ignore these retransmissions. While this is clearly suboptimal, for compatibility reasons this is sensible behavior. Optimizations could be negotiated in future versions of this protocol. Note also that this property would also permit a sender to always send the same data, with the same data sequence number, on multiple subflows, if it so desired for reliability reasons.</t>

          <t>This protocol specification does not mandate any mechanisms for handling retransmissions, and much will be dependent upon local policy 
(as discussed in <xref target="sec_policy"/>). One can imagine aggressive connection-level retransmissions policies where every packet lost at subflow level is retransmitted on
a different subflow (hence, wasting bandwidth but possibly reducing application-to-application delays), or conservative retransmission policies where connection-level retransmits
are only used after a few subflow-level retransmission timeouts occur.</t>

          <t>It is envisaged that a standard connection-level retransmission mechanism 
would be implemented around a connection-level data queue: all segments that haven't 
been DATA_ACKed are stored. A timer is set when 
the head of the connection-level is ACKed at subflow level but its corresponding data 
is not ACKed at data level. This timer will guard against failures in retransmission
by middleboxes that proactively ACK data.</t>

          <t>The sender MUST keep data in its send buffer as long as the data has not been acknowledged at both connection level and on all subflows on which it
has been sent. In this way, the sender can always retransmit the data if needed, on the same subflow or on a different one. A special case is when a subflow fails: the sender 
will typically resend the data on other working subflows after a timeout, and will keep trying to retransmit the data 
on the failed subflow too. The sender will declare the subflow failed after a predefined upper bound on retransmissions is reached (which MAY be lower than the usual TCP limits of the Maximum Segment Life), or on the receipt of an ICMP error, and only then delete the outstanding data segments. </t>

          <t>Multiple retransmissions are triggers that will indicate that a subflow performs badly and could lead to a host resetting the subflow with a RST. However, additional research is required to understand the heuristics of how and when to reset underperforming subflows. For example, a highly asymmetric path may be misdiagnosed as underperforming. A RST for this purpose SHOULD be accompanied with an appropriate MP_TCPRST option (<xref target="sec_reset"/>).</t>

        </section>

        <section title="Congestion Control Considerations" anchor="sec_cc">
          <t>Different subflows in an MPTCP connection have different congestion windows.   
To achieve fairness at bottlenecks and resource pooling, it is necessary to couple the 
congestion windows in use on each subflow, in order to push most traffic to uncongested links. 
One algorithm for achieving this is presented in <xref target="RFC6356"/>; 
the algorithm does not achieve perfect resource pooling but is "safe" in that it is readily 
deployable in the current Internet. By this, we mean that it does not take up more capacity
on any one path than if it was a single path flow using only that route, so this ensures
fair coexistence with single-path TCP at shared bottlenecks.</t>

          <t>It is foreseeable that different congestion controllers will be implemented for MPTCP, each aiming to achieve different properties in the resource pooling/fairness/stability design space, as well as those for achieving different properties in quality of service, reliability, and resilience.</t>

          <t>Regardless of the algorithm used,
the design of the MPTCP protocol aims to provide the congestion control implementations sufficient information 
to take the right decisions; this information includes, for each subflow, which packets were lost and when. </t>
        </section>

        <section title="Subflow Policy" anchor="sec_policy">
          <t>Within a local MPTCP implementation, a host may use any local policy it wishes to decide how to share the traffic to be sent over the available paths.</t>
          <t>In the typical use case, where the goal is to maximize throughput, all available paths will be used simultaneously for data transfer, using coupled congestion control as described in <xref target="RFC6356"/>. It is expected, however, that other use cases will appear.</t>
          <t>For instance, a possibility is an 'all-or-nothing' approach, i.e., have a second path ready for use in the event of 
failure of the first path, but alternatives could include entirely saturating one path before using an additional 
path (the 'overflow' case). Such choices would be most likely based on the monetary cost of links, but may also be 
based on properties such as the delay or jitter of links, where stability (of delay or bandwidth) is more important than throughput. Application
requirements such as these are discussed in detail in <xref target="RFC6897"/>.</t>
          <t>The ability to make effective choices at the sender requires full knowledge of the path "cost", which 
is unlikely to be the case. It would be desirable for a receiver to be able to signal their own preferences for paths,
since they will often be the multihomed party, and may have to pay for metered incoming bandwidth.</t>
          <t>Whilst fine-grained control may be the most powerful solution, that would require some mechanism such as overloading the Explicit Congestion Notification (ECN) signal <xref target="RFC3168"/>, which is undesirable, and it is felt that there would not be sufficient benefit to justify an entirely new signal. Therefore, the MP_JOIN option (see <xref target="sec_join"/>) contains the 'B' bit, which allows a host to indicate to its peer that this path should be treated as a backup path to use only in the event of failure of other working subflows (i.e., a subflow where the receiver has indicated B=1 SHOULD NOT be used to send data unless there are no usable subflows where B=0).</t>
          <t>In the event that the available set of paths changes, a host may wish to signal a change in priority of subflows to the peer (e.g., a subflow that was previously set as backup should now take priority over all remaining subflows). Therefore, the MP_PRIO option, shown in <xref target="tcpm_prio"/>, can be used to change the 'B' flag of the subflow on which it is sent.</t>
          <?rfc needLines='8'?>
          <figure align="center" anchor="tcpm_prio" title="Change Subflow Priority (MP_PRIO) Option">
            <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-----+-+
   |     Kind      |     Length    |Subtype|     |B|
   +---------------+---------------+-------+-----+-+
              ]]></artwork>
          </figure>
          
<t>It should be noted that the backup flag is a request from a data receiver to a data sender only, and the data sender SHOULD adhere to these requests. A host cannot assume that the data sender will do so, however, since local policies -- or technical difficulties -- may override MP_PRIO requests. Note also that this signal applies to a single direction, and so the sender of this option could choose to continue using the subflow to send data even if it has signaled B=1 to the other host.</t>

        </section>
      </section>

      <section title="Address Knowledge Exchange (Path Management)" anchor="sec_pm">
        <t>We use the term "path management" to refer to the exchange of information about additional paths between hosts, which in this design is managed by multiple addresses at hosts. For more detail of the architectural thinking behind this design, see the MPTCP Architecture document <xref target="RFC6182"/>.</t>
        <t>This design makes use of two methods of sharing such
        information, and both can be used on a connection. 
        The first is the direct
        setup of new subflows, already described in
        <xref target="sec_join"/>, where the initiator has an
        additional address. The second method, described in the
        following subsections, signals addresses explicitly to the
        other host to allow it to initiate new subflows. The
        two mechanisms are complementary: the first is implicit and
        simple, while the explicit is more complex but is more
        robust. Together, the mechanisms allow addresses to change in
        flight (and thus support operation through NATs, since the
        source address need not be known), and also allow the
        signaling of previously unknown addresses, and of addresses
        belonging to other address families (e.g., both IPv4 and IPv6).</t>

        <t>Here is an example of typical operation of the protocol:
          <list style="symbols">
            <t>An MPTCP connection is initially set up between address/port A1 of Host A 
              and address/port B1 of Host B.&nbsp;  If Host A is multihomed and 
              multiaddressed, it can start an additional subflow from
              its address A2 to B1, by sending a SYN with a Join
              option from A2 to B1, using B's previously declared
              token for this connection.  Alternatively, if B is
              multihomed, it can try to set up a new subflow from B2 to
              A1, using A's previously declared token.  In either
              case, the SYN will be sent to the port already in use
              for the original subflow on the receiving host.</t>

            <t>Simultaneously (or after a timeout), an ADD_ADDR option 
(<xref target="sec_add_address"/>) is sent on an existing subflow, informing 
the receiver of the sender's alternative address(es). The recipient can use 
this information to open a new subflow to the sender's additional address. 
In our example, A will send ADD_ADDR option informing B of address/port A2.
The mix of using the SYN-based option and the ADD_ADDR option, including 
timeouts, is implementation specific and can be tailored to agree with local policy.</t>

            <t>If subflow A2-B1 is successfully set up, Host B can use the Address ID in 
the Join option to correlate this with the ADD_ADDR option that will also arrive on 
an existing subflow; now B knows not to open A2-B1, ignoring the ADD_ADDR.
Otherwise, if B has not received the A2-B1 MP_JOIN SYN but received the ADD_ADDR, 
it can try to initiate a new subflow from one or more of its addresses to address 
A2. This permits new sessions to be opened if one host is behind a NAT.</t>
          </list>
       Other ways of using the two signaling mechanisms are possible; for instance, 
signaling addresses in other address families can only be done explicitly using the Add Address option.
        </t>

      <section title="Address Advertisement" anchor="sec_add_address">
        <t>The Add Address (ADD_ADDR) MPTCP option announces additional addresses (and optionally, ports) on which a 
host can be reached (<xref target="tcpm_address"/>). 
This option can be used at any time during a connection, depending on when the 
sender wishes to enable multiple paths and/or when paths become available. As with all MPTCP
signals, the receiver MUST undertake standard TCP validity checks, e.g. <xref target="RFC5961"/>, before acting upon it.</t>

        <t>Every address has an Address ID that can be used for uniquely identifying the address within a connection for address removal. This is also 
used to identify MP_JOIN options (see <xref target="sec_join"/>) relating to 
the same address, even when address translators are in use. The Address ID MUST uniquely
identify the address to the sender (within the scope of the connection), but the mechanism for 
allocating such IDs is implementation specific.</t>

        <t>All address IDs learned via either MP_JOIN or ADD_ADDR
        SHOULD be stored by the receiver in a data structure that gathers all the Address ID 
        to address mappings for a connection (identified by a token pair). In this way, there is 
        a stored mapping between Address ID, observed source address, and token pair for 
        future processing of control information for a connection. Note that an implementation
        MAY discard incoming address advertisements at will, for example, for avoiding the
        required mapping state, or because advertised addresses are of no use to it (for 
        example, IPv6 addresses when it has IPv4 only). Therefore, a host MUST treat address
        advertisements as soft state, and it MAY choose to refresh advertisements periodically.</t>

        <t>This option is shown in <xref target="tcpm_address"/>. The illustration is sized for
        IPv4 addresses. For IPv6, the length of the address will be 16 octets (instead of 4).</t>

        <t>The 2 octets that specify the TCP port number to use are optional and their presence
        can be inferred from the length of the option. Although it is expected that the majority of 
        use cases will use the same port pairs as used for the initial subflow (e.g., port 
        80 remains port 80 on all subflows, as does the ephemeral port at the client), there 
        may be cases (such as port-based load balancing) where the explicit specification of 
        a different port is required. If no port is specified, MPTCP SHOULD attempt to 
        connect to the specified address on the same port as is already in use by the subflow
        on which the ADD_ADDR signal was sent; this is discussed in more detail in <xref target="heuristics"/>.</t>

        <t>The Truncated HMAC present in this Option is the rightmost 64 bits of an HMAC, negotiated and
        calculated in the same way as for MP_JOIN as described in <xref target="sec_join"/>. For this 
        specification of MPTCP, as there is only one hash algorithm option specified, this will be HMAC as 
        defined in <xref target="RFC2104"/>, using the SHA-256 hash algorithm <xref target="SHS"/>, 
        implemented as in <xref target="RFC6234"/>. In the same way as for MP_JOIN, the key for the HMAC 
        algorithm, in the case of the message transmitted by Host A, will be Key-A followed by Key-B, and in 
        the case of Host B, Key-B followed by Key-A.  These are the keys that were exchanged in the original 
        MP_CAPABLE handshake. The message for the HMAC is the Address ID, IP Address, and Port which precede 
        the HMAC in the ADD_ADDR option. If the port is not present in the ADD_ADDR option, the HMAC message
        will nevertheless include two octets of value zero. The rationale for the HMAC is to
        prevent unauthorized entities from injecting ADD_ADDR signals in an attempt to hijack a connection.
        Note that additionally the presence of this HMAC prevents the address being changed in flight unless 
        the key is known by an intermediary. If a host receives an ADD_ADDR option for which it cannot
        validate the HMAC, it SHOULD silently ignore the option.</t>

        <t>A set of four flags are present after the subtype and before the Address ID. Only the rightmost 
        bit - labelled 'E' - is assigned today. The other bits are currently unassigned and MUST be set to 
        zero by a sender and MUST be ignored by the receiver.</t>

        <t>The 'E' flag exists to provide reliability for this option. Because this option will often be sent
        on pure ACKs, there is no guarantee of reliability. Therefore, a receiver receiving a fresh ADD_ADDR
        option (where E=0), will send the same option back to the sender, but not including the HMAC, and 
        with E=1. The lack of this echo can be used by the initial ADD_ADDR sender to retransmit the ADD_ADDR
        according to local policy.</t>

        <?rfc needLines='11'?>
        <figure align="center" anchor="tcpm_address" title="Add Address (ADD_ADDR) Option">
          <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-------+---------------+
   |     Kind      |     Length    |Subtype|(rsv)|E|  Address ID   |
   +---------------+---------------+-------+-------+---------------+
   |          Address (IPv4 - 4 octets / IPv6 - 16 octets)         |
   +-------------------------------+-------------------------------+
   |   Port (2 octets, optional)   |                               |
   +-------------------------------+                               |
   |        Truncated HMAC (8 octets, if length > 10 octets)       |
   |                               +-------------------------------+
   |                               |
   +-------------------------------+
            ]]></artwork>
        </figure>

        <t>Due to the proliferation of NATs, it is reasonably likely that one host may attempt to advertise private addresses <xref target="RFC1918"/>. It is not desirable to prohibit this, since there may be cases where both hosts have additional interfaces on the same private network, and a host MAY want to advertise such addresses. The MP_JOIN handshake to create a new subflow (<xref target="sec_join"/>) provides mechanisms to minimize security risks. The MP_JOIN message contains a 32-bit token that uniquely identifies the connection to the receiving host. If the token is unknown, the host will return with a RST. In the unlikely event that the token is known, subflow setup will continue, but the HMAC exchange must occur for authentication. This will fail, and will provide sufficient protection against two unconnected hosts accidentally setting up a new subflow upon the signal of a private address. Further security considerations around the issue of ADD_ADDR messages that accidentally misdirect, or maliciously direct, new MP_JOIN attempts are discussed in <xref target="sec_security"/>.</t>

        <t>Ideally, ADD_ADDR and REMOVE_ADDR options would be sent reliably, and in order, to the other end. This would ensure that this address management does not unnecessarily cause an outage in the connection when remove/add addresses are processed in reverse order, and also to ensure that all possible paths are used. Note, however, that losing reliability and ordering will not
break the multipath connections, it will just reduce the opportunity to open multipath paths and to survive different patterns of path failures. </t>

        <t>Therefore, implementing reliability signals for these MPTCP options is not necessary. In order to minimize the impact of the loss of these options, however, it is RECOMMENDED that a sender should send these options on all available subflows.
        If these options need to be received in order, an implementation SHOULD only send one ADD_ADDR/REMOVE_ADDR option per RTT, to minimize the risk of misordering.</t>

        <t>A host can send an ADD_ADDR message with an already assigned Address ID, but the Address MUST be the same as previously assigned to this Address ID, and the Port MUST be different from one already in use for this Address ID. If these conditions are not met, the receiver SHOULD silently ignore the ADD_ADDR. A host wishing to replace an existing Address ID MUST first remove the existing one (<xref target="sec_remove_addr"/>).</t>

        <t>A host that receives an ADD_ADDR but finds a connection set up to that IP address and port number is unsuccessful SHOULD NOT perform further connection attempts to this address/port combination for this connection. A sender that wants to trigger a new incoming connection attempt on a previously advertised address/port combination can therefore refresh ADD_ADDR information by sending the option again.</t>

        <t>During normal MPTCP operation, it is unlikely that there will be sufficient TCP option space for ADD_ADDR to be included along with those for data sequence numbering (<xref target="sec_dsn"/>). Therefore, it is expected that an MPTCP implementation will send the ADD_ADDR option on separate ACKs. As discussed earlier, however, an MPTCP implementation MUST NOT treat duplicate ACKs with any MPTCP option, with the exception of the DSS option, as indications of congestion <xref target="RFC5681"/>, and an MPTCP implementation SHOULD NOT send more than two duplicate ACKs in a row for signaling purposes.</t>
        
      </section>
      <section title="Remove Address" anchor="sec_remove_addr">
        <t>If, during the lifetime of an MPTCP connection, a previously announced address becomes invalid (e.g., if the interface disappears), the affected host SHOULD announce this so that the peer can remove subflows related to this address.</t>
        <t>This is achieved through the Remove Address (REMOVE_ADDR) option (<xref target="tcpm_remove"/>), which will remove a previously added address (or list of addresses) from a connection and terminate any subflows currently using that address.</t>
        <t>For security purposes, if a host receives a REMOVE_ADDR option, it must ensure the affected path(s) are no longer in use before it instigates closure. The receipt of REMOVE_ADDR SHOULD first trigger the sending of a TCP keepalive <xref target="RFC1122"/> on the path, and if a response is received the path SHOULD NOT be removed. Typical TCP validity tests on the subflow (e.g., ensuring sequence and ACK numbers are correct) MUST also be undertaken. An implementation can use indications of these test failures as part of intrusion detection or error logging.</t>
        <t>The sending and receipt (if no keepalive response was received) of this message SHOULD trigger the sending of RSTs by both hosts on the affected subflow(s) (if possible), as a courtesy to cleaning up middlebox state, before cleaning up any local state.</t>
        <t>Address removal is undertaken by ID, so as to permit the use of NATs and other middleboxes that rewrite source addresses. If there is no address at the requested ID, the receiver will silently ignore the request.</t>
        <t>A subflow that is still functioning MUST be closed with a FIN exchange as in regular TCP, rather than using this option. For more information, see <xref target="sec_close"/>.</t>
        <?rfc needLines='8'?>
        <figure align="center" anchor="tcpm_remove" title="Remove Address (REMOVE_ADDR) Option">
          <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-------+---------------+
   |     Kind      |  Length = 3+n |Subtype|(resvd)|   Address ID  | ...
   +---------------+---------------+-------+-------+---------------+
                              (followed by n-1 Address IDs, if required)
            ]]></artwork>
        </figure>
      </section>

      </section>

      <section title="Fast Close" anchor="sec_fastclose">
        <t>Regular TCP has the means of sending a reset (RST) signal to abruptly 
        close a connection. With MPTCP, a regular RST only has the scope of the subflow
        and will only close the concerned subflow but not affect the remaining
        subflows. MPTCP's connection will stay alive at the data level, in order
        to permit break-before-make handover between subflows. It is therefore
        necessary to provide an MPTCP-level "reset" to allow the abrupt closure
        of the whole MPTCP connection, and this is the MP_FASTCLOSE option.</t>

        <t>MP_FASTCLOSE is used to indicate to the peer that the connection will be
        abruptly closed and no data will be accepted anymore. The reasons for
        triggering an MP_FASTCLOSE are implementation specific. Regular TCP does
        not allow sending a RST while the connection is in a synchronized
        state <xref target="RFC0793"/>. Nevertheless, implementations allow
        the sending of a RST in this state, if, for example, the operating
        system is running out of resources. In these cases, MPTCP should send
        the MP_FASTCLOSE. This option is illustrated in <xref target="tcpm_fastclose"/>.</t>

        <?rfc needLines='12'?>
        <figure align="center" anchor="tcpm_fastclose" title="Fast Close (MP_FASTCLOSE) Option">
          <artwork align="left"><![CDATA[
                          1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +---------------+---------------+-------+-----------------------+
     |     Kind      |    Length     |Subtype|      (reserved)       |
     +---------------+---------------+-------+-----------------------+
     |                      Option Receiver's Key                    |
     |                            (64 bits)                          |
     |                                                               |
     +---------------------------------------------------------------+
            ]]></artwork>
        </figure>

        <t>If Host A wants to force the closure of an MPTCP connection, it has two
	different options:
	  <list style="symbols">
	    <t>Option A (ACK) : Host A sends an ACK containing the MP_FASTCLOSE
	    option on one subflow, containing the key of Host B as declared in
	    the initial connection handshake.  On all the other subflows, Host A
	    sends a regular TCP RST to close these subflows, and tears them down.
	    Host A now enters FASTCLOSE_WAIT state.</t>

            <t>Option R (RST) : Host A sends a RST containing the MP_FASTCLOSE
	    option on all subflows, containing the key of Host B as declared in
	    the initial connection handshake.  Host A can tear the subflows and
	    the connection down immediately.</t>
	  </list>
	</t>

	<t>If host A decides to force the closure by using Option A and sending
	an ACK with the MP_FASTCLOSE option, the connection shall proceed as follows:
          <list style="symbols">
            <t>Upon receipt of an ACK with MP_FASTCLOSE by Host B, containing the valid key, Host B answers
            on the same subflow with a TCP RST and tears down all subflows. Host B can
            now close the whole MPTCP connection (it transitions directly to CLOSED state).</t>

            <t>As soon as Host A has received the TCP RST on the remaining subflow, it
            can close this subflow and tear down the whole connection (transition from
            FASTCLOSE_WAIT to CLOSED states). If Host A receives an MP_FASTCLOSE instead
            of a TCP RST, both hosts attempted fast closure simultaneously. Host A should
            reply with a TCP RST and tear down the connection.</t>

            <t>If Host A does not receive a TCP RST in reply to its MP_FASTCLOSE after one
            retransmission timeout (RTO) (the RTO of the subflow where the MP_FASTCLOSE has been sent), it SHOULD
            retransmit the MP_FASTCLOSE. The number of retransmissions SHOULD be
            limited to avoid this connection from being retained for a long time, but
            this limit is implementation specific. A RECOMMENDED number is 3. If no TCP RST
            is received in response, Host A SHOULD send a TCP RST with the MP_FASTCLOSE option
	    itself when it releases state in order to clear any remaining state at middleboxes.</t>
          </list>
        </t>

	<t>If however host A decides to force the closure by using Option R and
	sending a RST with the MP_FASTCLOSE option, Host B will act as follows:
	Upon receipt of a RST with MP_FASTCLOSE, containing the valid key,
	Host B tears down all subflows by sending a TCP RST. Host B can now close the whole MPTCP
	connection (it transitions directly to CLOSED state).</t>
      </section>

      <section title="Subflow Reset" anchor="sec_reset">
	<t>An implementation of MPTCP may also need to send a regular TCP RST to force
	the closure of a subflow. A host sends a TCP RST in order to close a subflow
	or reject an attempt to open a subflow (MP_JOIN). In order to inform the
	receiving host why a subflow is being closed or rejected, the TCP RST packet
	MAY include the MP_TCPRST Option. The host MAY use this information to
	decide, for example, whether it tries to re-establish the subflow
	immediately, later, or never.</t>

        <?rfc needLines='8'?>
        <figure align="center" anchor="tcpm_reset" title="TCP RST Reason (MP_TCPRST) Option">
          <artwork align="left"><![CDATA[
                         1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +---------------+---------------+-------+-----------------------+
    |     Kind      |    Length     |Subtype|U|V|W|T|    Reason     |
    +---------------+---------------+-------+-----------------------+
            ]]></artwork>
        </figure>

        <t>The MP_TCPRST option contains a reason code that allows the
        sender of the option to provide more information about the reason for
        the termination of the subflow.  Using 12 bits of option space, the
        first four bits are reserved for flags (only one of which is currently
        defined), and the remaining octet is used to express a reason code for 
        this subflow termination, from which a receiver MAY infer information 
        about the usability of this path.</t>
        
        <t>The "T" flag is used by the sender to indicate whether the error
        condition that is reported is Transient (T bit set to 1) or Permanent
        (T bit set to 0).  If the error condition is considered to be
        Transient by the sender of the RST segment, the recipient of this
        segment MAY try to reestablish a subflow for this connection over the 
        failed path.  The time at which a receiver may try to re-establish this
        is implementation-specific, but SHOULD take into account the properties
        of the failure defined by the following reason code.  If the error condition 
        is considered to be permanent, the receiver of the RST segment SHOULD NOT try 
        to reestablish a subflow for this connection over this path.  The "U", "V" 
        and "W" flags are not defined by this specification and are reserved for
        future use.</t>

        <t>The "Reason" code is an 8-bit field that indicates the reason for
        the termination of the subflow.  The following codes are defined in
        this document:

          <list style="symbols">
            <t>Unspecified error (code 0x0).  This is the default error implying the
            subflow is not longer available.  The presence of this option shows
	    that the RST was generated by a MPTCP-aware device.</t>

            <t>MPTCP specific error (code 0x01).  An error has been detected in the 
            processing of MPTCP options.  This is the usual reason code to return
            in the cases where a RST is being sent to close a subflow for reasons
            of an invalid response.</t>

            <t>Lack of resources (code 0x02).  This code indicates that the
            sending host does not have enough resources to support the
            terminated subflow.</t>

            <t>Administratively prohibited (code 0x03).  This code indicates that
            the requested subflow is prohibited by the policies of the sending
            host.</t>

            <t>Too much outstanding data (code 0x04).  This code indicates that 
            there is an excessive amount of data that need to be transmitted
            over the terminated subflow while having already been acknowledged
            over one or more other subflows. This may occur if a path has been
            unavailable for a short period and it is more efficient to reset and
            start again than it is to retransmit the queued data.</t>

            <t>Unacceptable performance (code 0x05).  This code indicates that
            the performance of this subflow was too low compared to the other
            subflows of this Multipath TCP connection.</t>

            <t>Middlebox interference (code 0x06).  Middlebox interference has
            been detected over this subflow making MPTCP signaling invalid.  For
            example, this may be sent if the checksum does not validate.</t>
          </list>
        </t>
      </section>

      <section title="Fallback" anchor="sec_fallback">
        <t>Sometimes, middleboxes will exist on a path that could prevent the operation of MPTCP. MPTCP has been designed in order to cope with many middlebox modifications (see <xref target="sec_middleboxes"/>), but there are still some cases where a subflow could fail to operate within the MPTCP requirements. These cases are notably the following: the loss of MPTCP options on a path and the modification of payload data. If such an event occurs, it is necessary to "fall back" to the previous, safe operation. This may be either falling back to regular TCP or removing a problematic subflow.</t>

        <t>At the start of an MPTCP connection (i.e., the first subflow), it is important to ensure that the path is fully MPTCP capable and the necessary MPTCP options can reach each host. The handshake as described in <xref target="sec_init"/> SHOULD fall back to regular TCP if either of the SYN messages do not have the MPTCP options: this is the same, and desired, behavior in the case where a host is not MPTCP capable, or the path does not support the MPTCP options. When attempting to join an existing MPTCP connection (<xref target="sec_join"/>), if a path is not MPTCP capable and the MPTCP options do not get through on the SYNs, the subflow will be closed according to the MP_JOIN logic.</t>

        <t>There is, however, another corner case that should be addressed. That is one of MPTCP options getting through on the SYN, but not on regular packets. This can be resolved if the subflow is the first subflow, and thus all data in flight is contiguous, using the following rules.</t>

        <t>A sender MUST include a DSS option with data sequence mapping in every segment until one of the sent segments has been acknowledged with a DSS option containing a Data ACK. Upon reception of the acknowledgment, the sender has the confirmation that the DSS option passes in both directions and may choose to send fewer DSS options than once per segment.</t>

        <t>If, however, an ACK is received for data (not just for the SYN) without a DSS option containing a Data ACK, the sender determines the path is not MPTCP capable. In the case of this occurring on an additional subflow (i.e., one started with MP_JOIN), the host MUST close the subflow with a RST. In the case of the first subflow (i.e., that started with MP_CAPABLE), it MUST drop out of an MPTCP mode back to regular TCP. The sender will send one final data sequence mapping, with the Data-Level Length value of 0 indicating an infinite mapping (in case the path drops options in one direction only), and then revert to sending data on the single subflow without any MPTCP options.</t>

        <t>If a subflow breaks during operation, e.g. if it is re-routed and MPTCP options are no longer permitted, then once this is detected (by the subflow-level receive buffer filling up), the subflow SHOULD be treated as broken and closed with a RST, since no data can be delivered to the application layer, and no fallback signal can be reliably sent. This RST SHOULD include the MP_TCPRST option (<xref target="sec_reset"/>) with an appropriate reason code.</t>

        <t>These rules should cover all cases where such a failure could happen: whether it's on the forward or reverse path and whether the server or the client first sends data. If lost options on data packets occur on any other subflow apart from the initial subflow, it should be treated as a standard path failure. The data would not be DATA_ACKed (since there is no mapping for the data), and the subflow can be closed with a RST, containing a MP_TCPRST option (<xref target="sec_reset"/>) with an appropriate reason code.</t>

        <t>The case described above is a specialized case of fallback, for when the lack of MPTCP support is detected before any data is acknowledged at the connection level on a subflow. More generally, fallback (either closing a subflow, or to regular TCP) can become necessary at any point during a connection if a non-MPTCP-aware middlebox changes the data stream.</t>

        <t>As described in <xref target="sec_generalop"/>, each portion of data for which there is a mapping is protected by a checksum, if checksums have been negotiated. This mechanism is used to detect if middleboxes have made any adjustments to the payload (added, removed, or changed data). A checksum will fail if the data has been changed in any way. This will also detect if the length of data on the subflow is increased or decreased, and this means the data sequence mapping is no longer valid. The sender no longer knows what subflow-level sequence number the receiver is genuinely operating at (the middlebox will be faking ACKs in return), and it cannot signal any further mappings. Furthermore, in addition to the possibility of payload modifications that are valid at the application layer, there is the possibility that false positives could be hit across MPTCP segment boundaries, corrupting the data. Therefore, all data from the start of the segment that failed the checksum onwards is not trustworthy.</t>

        <t>Note that if checksum usage has not been negotiated, this fallback mechanism cannot be used unless there is some higher or lower layer signal to inform the MPTCP implementation that the payload has been tampered with.</t>

        <t>When multiple subflows are in use, the data in flight on a subflow will likely involve data that is not contiguously part of the connection-level stream, since segments will be spread across the multiple subflows. Due to the problems identified above, it is not possible to determine what the adjustment has done to the data (notably, any changes to the subflow sequence numbering). Therefore, it is not possible to recover the subflow, and the affected subflow must be immediately closed with a RST, featuring an MP_FAIL option (<xref target="tcpm_fallback"/>), which defines the data sequence number at the start of the segment (defined by the data sequence mapping) that had the checksum failure. Note that the MP_FAIL option requires the use of the full 64-bit sequence number, even if 32-bit sequence numbers are normally in use in the DSS signals on the path.</t>

        <?rfc needLines='8'?>
        <figure align="center" anchor="tcpm_fallback" title="Fallback (MP_FAIL) Option">
          <artwork align="left"><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+----------------------+
   |     Kind      |   Length=12   |Subtype|      (reserved)      |
   +---------------+---------------+-------+----------------------+
   |                                                              |
   |                 Data Sequence Number (8 octets)              |
   |                                                              |
   +--------------------------------------------------------------+

            ]]></artwork>
        </figure>

        <t>The receiver MUST discard all data following the data sequence number specified.
        Failed data MUST NOT be DATA_ACKed and so will be retransmitted on other subflows (<xref target="sec_retransmit"/>). </t>

        <t> A special case is when there is a single subflow and it fails with a checksum error. 
        If it is known that all unacknowledged data in flight is 
contiguous (which will usually be the case with a single subflow), an infinite mapping can be applied to the subflow without the need to close it first, and 
essentially turn off all further MPTCP signaling. In this case, if a receiver identifies a checksum failure
when there is only one path, it will send back an MP_FAIL option on the subflow-level ACK, referring to the data-level sequence number of the start of the 
segment on which the checksum error was detected. The sender will receive
this, and if all unacknowledged data in flight is contiguous, will signal an infinite mapping. 
This infinite mapping will be a DSS option (<xref target="sec_generalop"/>)
on the first new packet, containing a data sequence mapping that acts retroactively, referring to the start of the subflow sequence 
number of the most recent segment that was known to be delivered intact (i.e. was successfully DATA_ACKed). From that point onwards, data can be altered 
by a middlebox without affecting MPTCP, as the data stream is equivalent to a regular, legacy TCP session.
The MP_FAIL signal affects only one direction of traffic. It is not mandatory for the reciever of an MP_FAIL
to also respond with an MP_FAIL, since the paths may only be damaged in one direction. However, implementations
MAY choose to send a MP_FAIL in the reverse direction and entirely revert to a regular TCP session.</t>

        <t>In the rare case that the data is not contiguous (which could happen when there is only one subflow but it is retransmitting data from a subflow
that has recently been uncleanly closed), the receiver MUST close the subflow with a RST with MP_FAIL. The receiver MUST discard all data that follows the 
data sequence number specified. The sender MAY attempt to create a new subflow belonging to the same connection, and, if it chooses to do so, SHOULD place 
the single subflow immediately in single-path mode by setting an infinite data sequence mapping. This mapping will begin from the data-level sequence number 
that was declared in the MP_FAIL.</t>

        <t>After a sender signals an infinite mapping, it MUST only use subflow ACKs to clear its send buffer.
This is because Data ACKs may become misaligned with the subflow ACKs when middleboxes insert or delete data. 
The receive SHOULD stop generating Data ACKs after it receives an infinite mapping. </t>

        <t>When a connection has fallen back, only one subflow can send data; otherwise, the receiver would not know how to reorder the data. In practice, this means that all MPTCP subflows will have to be terminated except one. Once MPTCP falls back to regular TCP, it MUST NOT revert to MPTCP later in the connection.</t>

        <t>It should be emphasized that we are not attempting to prevent the use of middleboxes that want to adjust the payload. An MPTCP-aware middlebox could provide such functionality by also rewriting checksums.</t>
      </section>
      
      <section title="Error Handling" anchor="sec_errors">
        <t>In addition to the fallback mechanism as described above, the standard classes of TCP errors may need to be handled in an MPTCP-specific way. Note that changing semantics -- such as the relevance of a RST -- are covered in <xref target="sec_semantics"/>. Where possible, we do not want to deviate from regular TCP behavior.</t>
        <t>The following list covers possible errors and the appropriate MPTCP behavior:
          <list style="symbols">
            <t>Unknown token in MP_JOIN (or HMAC failure in MP_JOIN ACK, or missing MP_JOIN in SYN/ACK response): send RST (analogous to TCP's behavior on an unknown port)</t>
            <t>DSN out of window (during normal operation): drop the data, do not send Data ACKs</t>
            <t>Remove request for unknown address ID: silently ignore</t>
          </list>
        </t>
      </section>

      <section title="Heuristics" anchor="heuristics">

        <t>There are a number of heuristics that are needed for
        performance or deployment but that are not required for
        protocol correctness.  In this section, we detail such
        heuristics. Note that discussion of buffering and certain
        sender and receiver window behaviors are presented in Sections 
        <xref target="sec_rwin" format="counter"/> and <xref target="sec_sender" format="counter"/>, 
        as well as retransmission in <xref target="sec_retransmit"/>.</t>

        <section title="Port Usage">
          <t>Under typical operation, an MPTCP implementation SHOULD use
          the same ports as already in use. In other words, the
          destination port of a SYN containing an MP_JOIN option SHOULD
          be the same as the remote port of the first subflow in the
          connection.  The local port for such SYNs SHOULD also be the
          same as for the first subflow (and as such, an
          implementation SHOULD reserve ephemeral ports across all
          local IP addresses), although there may be cases where this
          is infeasible.  This strategy is intended to maximize the
          probability of the SYN being permitted by a firewall or NAT
          at the recipient and to avoid confusing any network
          monitoring software.</t> 

          <t>There may also be cases, however, where
          the passive opener wishes to signal to the other host  
          that a specific port should be used, and this facility is
          provided in the Add Address option as documented in
          <xref target="sec_add_address"/>.  It is therefore feasible
          to allow multiple subflows between the same two addresses
          but using different port pairs, and 
          such a facility could be used to allow load balancing within
          the network based on 5-tuples (e.g., some ECMP implementations <xref target="RFC2992"/>).</t>
        </section>

        <section title="Delayed Subflow Start and Subflow Symmetry">
          <t>Many TCP connections are short-lived and consist only of a few 
          segments, and so the overheads 
          of using MPTCP outweigh any benefits. A heuristic is required,
          therefore, to decide when to start using additional subflows in 
          an MPTCP connection. We expect that experience gathered from
          deployments will provide further guidance on this, and will be
          affected by particular application characteristics (which are
          likely to change over time). However, a suggested general-purpose
          heuristic that an implementation MAY choose to employ is as follows.
          Results from experimental deployments are needed in order to verify
          the correctness of this proposal.</t>

          <t>If a host has data buffered for its peer (which implies that the
          application has received a request for data), the host opens one
          subflow for each initial window's worth of data that is buffered.</t>

          <t>Consideration should also be given to limiting the rate of adding
          new subflows, as well as limiting the total number of subflows open
          for a particular connection.  A host may choose to vary these values 
          based on its load or knowledge of traffic and path characteristics.</t>

          <t>Note that this heuristic alone is probably insufficient. Traffic
          for many common applications, such as downloads, is highly asymmetric and 
          the host that is multihomed may well be the client that will never fill
          its buffers, and thus never use MPTCP. Advanced APIs that allow an 
          application to signal its traffic requirements would aid in these decisions.</t>

          <t>An additional time-based heuristic could be applied, opening additional
          subflows after a given period of time has passed. This would alleviate the
          above issue, and also provide resilience for low-bandwidth but long-lived
          applications.</t>

          <t>Another issue is that both communicating hosts may simultaneously try to
	  set up a subflow between the same pair of addresses. This leads to an
	  inefficient use of resources.</t>

          <t>If the the same ports are used on all subflows, as recommended above, 
          then standard TCP simultaneous open logic should take care of this situation 
          and only one subflow will be established between the address pairs. However, 
          this relies on the same ports being used at both end hosts. If a host does
          not support TCP simultaneous open, it is RECOMMENDED that some element 
          of randomization is applied to the time to wait before opening new subflows,
          so that only one subflow is created between a given address pair. If, however, 
          hosts signal additional ports to use (for example, for leveraging ECMP on-path), 
          this heuristic is not appropriate.</t>

          <t>This section has shown some of the considerations that an implementer
          should give when developing MPTCP heuristics, but is not intended to be
          prescriptive.</t>
        </section>

        <section title="Failure Handling">
          <t>Requirements for MPTCP's handling of unexpected signals have been
          given in <xref target="sec_errors"/>. There are other failure cases, 
          however, where a hosts can choose appropriate behavior.</t>

          <t>For example, <xref target="sec_init"/> suggests that a host SHOULD
          fall back to trying regular TCP SYNs after one or more failures of MPTCP
          SYNs for a connection. A host may keep a system-wide cache of such 
          information, so that it can back off from using MPTCP, firstly for that
          particular destination host, and eventually on a whole interface, if 
          MPTCP connections continue failing.</t>

          <t>Another failure could occur when the MP_JOIN handshake fails.
          <xref target="sec_errors"/> specifies that an incorrect handshake MUST
          lead to the subflow being closed with a RST. A host operating an active
          intrusion detection system may choose to start blocking MP_JOIN packets
          from the source host if multiple failed MP_JOIN attempts are seen. From
          the connection initiator's point of view, if an MP_JOIN fails, it SHOULD
          NOT attempt to connect to the same IP address and port during the lifetime 
          of the connection, unless the other host refreshes the information with 
          another ADD_ADDR option. Note that the ADD_ADDR option is informational 
          only, and does not guarantee the other host will attempt a connection.</t>

          <t>In addition, an implementation may learn, over a number of connections, 
          that certain interfaces or destination addresses consistently fail and
          may default to not trying to use MPTCP for these.  Behavior could also 
          be learned for particularly badly performing subflows or subflows that
          regularly fail during use, in order to temporarily choose not to use 
          these paths.</t>
        </section>
      </section>
    </section>

    <section title="Semantic Issues" anchor="sec_semantics">
      <t>In order to support multipath operation, the semantics of some TCP components have changed. To aid clarity, this section collects these semantic changes as a reference.
        <list style="hanging">
          <t hangText="Sequence number:"> The (in-header) TCP sequence
            number is specific to the subflow. To allow the receiver to
            reorder application data, an additional data-level
            sequence space is used. In this data-level sequence space, the initial SYN and
            the final DATA_FIN occupy 1 octet of sequence space. There is an explicit
            mapping of data sequence space to subflow sequence space,
            which is signaled through TCP options in data
            packets.</t>

          <t hangText="ACK:"> The ACK field in the TCP header
            acknowledges only the subflow sequence number, not the
            data-level sequence space. Implementations SHOULD NOT
            attempt to infer a data-level acknowledgment from the
            subflow ACKs.  
            This separates subflow- and connection-level processing
            at an end host.</t>

          <t hangText="Duplicate ACK:"> A duplicate ACK that includes any MPTCP signaling
            (with the exception of the DSS option) MUST NOT be treated as a signal of congestion. 
            To limit the chances of non-MPTCP-aware entities mistakenly interpreting duplicate 
            ACKs as a signal of congestion, MPTCP SHOULD NOT send more than two duplicate ACKs 
            containing (non-DSS) MPTCP signals in a row.</t>

          <t hangText="Receive Window:">The receive window in the TCP
            header indicates the amount of free buffer space for the
            whole data-level connection (as opposed to for this
            subflow) that is available at the receiver.  This is the
            same semantics as regular TCP, but to maintain these
            semantics the receive window must be interpreted at the
            sender as relative to the sequence number given in the
            DATA_ACK rather than the subflow ACK in the TCP header.
            In this way, the original flow control role is preserved.
            Note that some middleboxes may change the receive window,
            and so a host SHOULD use the maximum value of those recently
            seen on the constituent subflows for the connection-level
            receive window, and also needs to maintain a subflow-level 
            window for subflow-level processing.</t>

          <t hangText="FIN:"> The FIN flag in the TCP header applies
            only to the subflow it is sent on, not to the whole
            connection. For connection-level FIN semantics, the
            DATA_FIN option is used.</t>

          <t hangText="RST:"> The RST flag in the TCP header applies
            only to the subflow it is sent on, not to the whole
            connection. The MP_FASTCLOSE option provides the fast close
            functionality of a RST at the MPTCP connection level.</t>

          <t hangText="Address List:"> Address list management (i.e., 
            knowledge of the local and remote hosts' lists of 
            available IP addresses) is handled
            on a per-connection basis (as opposed to per subflow, per
            host, or per pair of communicating hosts).  This permits
            the application of per-connection local policy.  Adding an
            address to one connection (either explicitly through an Add
            Address message, or implicitly through a Join) has no implication 
            for other connections between the same pair of hosts.</t>

          <t hangText="5-tuple:"> The 5-tuple (protocol, local
            address, local port, remote address, remote port)
            presented by kernel APIs to the application layer in a
            non-multipath-aware application is that of the first
            subflow, even if the subflow has since been closed and
            removed from the connection. This decision, and other
            related API issues, are discussed in more detail in
            <xref target="RFC6897"/>.</t>
        </list>
      </t>
    </section>
 
    <section title="Security Considerations" anchor="sec_security">
      <t>As identified in <xref target="RFC6181"/>, the addition of multipath capability to TCP will bring with it a number of new classes of threat. In order to prevent these, <xref target="RFC6182"/> presents a set of requirements for a security solution for MPTCP. The fundamental goal is for the security of MPTCP to be "no worse" than regular TCP today, and the key security requirements are:
       <list style="symbols">
          <t>Provide a mechanism to confirm that the parties in a subflow handshake are the same as in the original connection setup.</t>
          <t>Provide verification that the peer can receive traffic at a new address before using it as part of a connection.</t>
          <t>Provide replay protection, i.e., ensure that a request to add/remove a subflow is 'fresh'.</t>
        </list>

        In order to achieve these goals, MPTCP includes a hash-based handshake algorithm documented in Sections <xref target="sec_init" format="counter"/> and <xref target="sec_join" format="counter"/>.</t>

      <t>The security of the MPTCP connection hangs on the use of keys that are shared once at the start of the first subflow, and are never sent again over the network (unless used in the fast close mechanism, <xref target="sec_fastclose"/>).  To ease demultiplexing while not giving away any cryptographic material, future subflows use a truncated cryptographic hash of this key as the connection identification "token".  The keys are concatenated and used as keys for creating Hash-based Message Authentication Codes (HMACs) used on subflow setup, in order to verify that the parties in the handshake are the same as in the original connection setup.  It also provides verification that the peer can receive traffic at this new address.  Replay attacks would still be possible when only keys are used; therefore, the handshakes use single-use random numbers (nonces) at both ends -- this ensures the HMAC will never be the same on two handshakes. Guidance on generating random numbers suitable for use as keys is given in <xref target="RFC4086"/> and discussed in <xref target="sec_init"/>. HMAC is also used to secure the ADD_ADDR option, due to the threats identified in <xref target="RFC7430"/>.</t>
      <t>
      The use of crypto capability bits in the initial connection handshake to negotiate use of a particular algorithm allows the deployment of additional crypto mechanisms in the future. Note that this would be susceptible to bid-down attacks only if the attacker was on-path (and thus would be able to modify the data anyway).
      The security mechanism presented in this document should therefore protect against all forms of flooding and hijacking attacks discussed in <xref target="RFC6181"/>.</t>

      <t>The version negotiation specified in <xref target="sec_init"/>, if differing MPTCP versions shared a common negotiation format, would allow an on-path attacker to apply a theoretical bid-down attack. However, since the v1 and v0 protocols have a different handshake, this is not an attack that can be applied here. Furthermore, an on-path attacker would have access to the raw data, negating any other TCP-level security mechanisms. 
      Also a change from <xref target="RFC6824"/> has removed the subflow identifer from the MP_PRIO option (<xref target="sec_policy"/>), to remove the theoretical attack where a subflow could be placed in "backup" mode by an attacker.</t>
      
      <t>During normal operation, regular TCP protection mechanisms (such as ensuring sequence numbers are in-window) will provide the same level of protection against attacks on individual TCP subflows as exists for regular TCP today. Implementations will introduce additional buffers compared to regular TCP, to reassemble data at the connection level. The application of window sizing will minimize the risk of denial-of-service attacks consuming resources.</t>

      <t>As discussed in <xref target="sec_add_address"/>, a host may advertise its private addresses, but these might point to different hosts in the receiver's network. The MP_JOIN handshake (<xref target="sec_join"/>) will ensure that this does not succeed in setting up a subflow to the incorrect host. However, it could still create unwanted TCP handshake traffic. This feature of MPTCP could be a target for denial-of-service exploits, with malicious participants in MPTCP connections encouraging the recipient to target other hosts in the network. Therefore, implementations should consider heuristics (<xref target="heuristics"/>) at both the sender and receiver to reduce the impact of this.</t>

      <t>To further protect against malicious ADD_ADDR messages sent by an off-path attacker, the ADD_ADDR includes an HMAC using the keys negotiated during the handshake. This effectively prevents an attacker from diverting an MPTCP connection through an off-path ADD_ADDR injection into the stream.</t>

      <t>A small security risk could theoretically exist with key reuse, but in order to accomplish a replay attack, both the sender and receiver keys, and the sender and receiver random numbers, in the MP_JOIN handshake (<xref target="sec_join"/>) would have to match.</t>

      <t>Whilst this specification defines a "medium" security solution, meeting the criteria specified at the start of this section and the threat analysis (<xref target="RFC6181"/>), since attacks only ever get worse, it is likely that a future Standards Track version of MPTCP would need to be able to support stronger security. There are several ways the security of MPTCP could potentially be improved; some of these would be compatible with MPTCP as defined in this document, whilst others may not be. For now, the best approach is to get experience with the current approach, establish what might work, and check that the threat analysis is still accurate.</t>

<t>Possible ways of improving MPTCP security could include:<list style="symbols">
<t>defining a new MPCTP cryptographic algorithm, as negotiated in MP_CAPABLE. A sub-case could be to include an additional deployment assumption, such as stateful servers, in order to allow a more powerful algorithm to be used.</t>
<t>defining how to secure data transfer with MPTCP, whilst not changing the signaling part of the protocol.</t>
<t>defining security that requires more option space, perhaps in conjunction with a "long options" proposal for extending the TCP options space (such as those surveyed in <xref target="TCPLO"/>), or perhaps building on the current approach with a second stage of MPTCP-option-based security.</t>
<t>revisiting the working group's decision to exclusively use TCP options for MPTCP signaling, and instead look at also making use of the TCP payloads.</t>
</list></t>

<t>MPTCP has been designed with several methods available to indicate a new security mechanism, including:
<list style="symbols">
<t>available flags in MP_CAPABLE (<xref target="tcpm_capable"/>);</t>
<t>available subtypes in the MPTCP option (<xref target="fig_option"/>);</t>
<t>the version field in MP_CAPABLE (<xref target="tcpm_capable"/>);</t>
</list></t>

    </section>

    <section title="Interactions with Middleboxes" anchor="sec_middleboxes">
      
        <t>Multipath TCP was designed to be deployable in the present world. Its design takes into account "reasonable"
existing middlebox behavior. In this section, we outline a few representative middlebox-related failure scenarios and 
show how Multipath TCP handles them. Next, we list the design decisions multipath has made to accommodate the different 
middleboxes.</t>

        <t>A primary concern is our use of a new TCP option. Middleboxes should forward packets
with unknown options unchanged, yet there are some that don't. These we expect will either strip options and pass the data, 
drop packets with new options, copy the same option into multiple segments (e.g., when doing segmentation), or drop 
options during segment coalescing.</t>

        <t>MPTCP uses a single new TCP option "Kind", and all message types are defined by "subtype" values (see <xref target="IANA"/>). This should reduce the chances of only some types of MPTCP options being passed, and instead the key differing characteristics are different paths, and the presence of the SYN flag.</t>

        <t>MPTCP SYN packets on the first subflow of a connection contain the MP_CAPABLE option (<xref target="sec_init"/>). If this is dropped, MPTCP SHOULD fall back to regular TCP. If packets with the MP_JOIN option (<xref target="sec_join"/>) are dropped, the paths will simply not be used.</t>

        <t>If a middlebox strips options but otherwise passes the packets unchanged, MPTCP will behave safely. If an MP_CAPABLE option is dropped on either the outgoing or the return path, the initiating host can fall back to regular TCP, as illustrated in <xref target="fig_syn"/> and discussed in <xref target="sec_init"/>.</t>

          <t>Subflow SYNs contain the MP_JOIN option. If this option is stripped on the outgoing path, 
the SYN will appear to be a regular SYN to Host B.&nbsp; Depending on whether there is a listening socket on 
the target port, Host B will reply either with SYN/ACK or RST (subflow connection fails). When Host A 
receives the SYN/ACK it sends a RST because the SYN/ACK does not contain the MP_JOIN option and its token. 
Either way, the subflow setup fails, but otherwise does not affect the MPTCP connection as a whole.</t>

        <figure align="center" anchor="fig_syn" title="Connection Setup with Middleboxes that Strip Options from Packets">
          <artwork align="left"><![CDATA[
     Host A                             Host B 
      |              Middlebox M            |
      |                   |                 |
      |  SYN(MP_CAPABLE)  |        SYN      |
      |-------------------|---------------->|
      |                SYN/ACK              |
      |<------------------------------------|
  a) MP_CAPABLE option stripped on outgoing path

    Host A                               Host B 
      |            SYN(MP_CAPABLE)          |
      |------------------------------------>|
      |             Middlebox M             |
      |                 |                   |
      |    SYN/ACK      |SYN/ACK(MP_CAPABLE)|
      |<----------------|-------------------|
  b) MP_CAPABLE option stripped on return path
           ]]></artwork>
        </figure>

        <t>We now examine data flow with MPTCP, assuming the flow is correctly set up, which implies the options in the SYN
packets were allowed through by the relevant middleboxes. If options are allowed through and there is no resegmentation or 
coalescing to TCP segments, Multipath TCP flows can proceed without problems.</t>

        <t>The case when options get stripped on data packets has been discussed in the Fallback section.
        If a fraction of options are stripped, behavior is not deterministic. If some data sequence mappings are lost, the connection can continue so long as mappings exist for the subflow-level data (e.g., if multiple maps have been sent that reinforce each other). If some subflow-level space is left unmapped, however, the subflow is treated as broken and is closed, through the process described in <xref target="sec_fallback"/>. MPTCP should survive with a loss of some Data ACKs, but performance will degrade as the fraction of stripped options increases.
We do not expect such cases to appear in practice, though: most 
middleboxes will either strip all options or let them all through.</t>

       <t>We end this section with a list of middlebox classes, their behavior, and the elements in the MPTCP design
that allow operation through such middleboxes. Issues surrounding dropping packets with options
or stripping options were discussed above, and are not included here:
 
        <list style="symbols">
          <t>NATs <xref target="RFC3022"/> (Network Address (and Port) Translators) change the source address (and often source port) of packets. This means that a host will not know its
    public-facing address for signaling in MPTCP. Therefore, MPTCP permits implicit address addition via the MP_JOIN option,
    and the handshake mechanism ensures that connection attempts to private addresses <xref target="RFC1918"/> do not cause problems.
    Explicit address removal is undertaken by an Address ID to allow no knowledge of the source address.</t>
    
          <t>Performance Enhancing Proxies (PEPs) <xref target="RFC3135"/> might proactively ACK data to increase performance. MPTCP, however, relies on accurate congestion control signals from the end host, and non-MPTCP-aware PEPs will not be able to provide such signals. MPTCP will, therefore, fall back to single-path TCP, or close the problematic subflow (see <xref target="sec_fallback"/>).</t>
          
          <t>Traffic Normalizers <xref target="norm"/> may not allow holes in sequence numbers, and may cache packets and retransmit the same data.
MPTCP looks like standard TCP on the wire, and will not retransmit different data on the same subflow sequence number. In the event of a retransmission, the same data will be retransmitted on the original TCP subflow even if it is additionally retransmitted at the connection level on a different subflow.</t>
          
          <t>Firewalls <xref target="RFC2979"/> might perform initial sequence number randomization on TCP connections. MPTCP uses relative 
sequence numbers in data sequence mapping to cope with this. Like NATs, firewalls will not permit many incoming connections, so
MPTCP supports address signaling (ADD_ADDR) so that a multiaddressed host can invite its peer behind the firewall/NAT to connect 
out to its additional interface.</t>

          <t>Intrusion Detection Systems look out for traffic patterns and content that could threaten a network. Multipath
will mean that such data is potentially spread, so it is more difficult for an IDS to analyze the whole traffic, and
potentially increases the risk of false positives. However, for an MPTCP-aware IDS, tokens can be read 
by such systems to correlate multiple subflows and reassemble for analysis.</t>

          <t>Application-level middleboxes such as content-aware firewalls may alter the payload within a subflow, such as rewriting URIs in HTTP traffic. MPTCP will detect these using the checksum
and close the affected subflow(s), if there are other subflows that can be used. If all subflows are affected, multipath
will fall back to TCP, allowing such middleboxes to change the payload. MPTCP-aware middleboxes should be able to adjust the payload and MPTCP metadata in order not to break the connection.</t>
        </list>

        In addition, all classes of middleboxes may affect TCP traffic in the following ways:
        <list style="symbols">
          <t>TCP options may be removed, or packets with unknown options dropped, by many classes of middleboxes. It is intended
that the initial SYN exchange, with a TCP option, will be sufficient to identify the path capabilities. If such a packet does
not get through, MPTCP will end up falling back to regular TCP.</t>

          <t>Segmentation/Coalescing (e.g., TCP segmentation offloading) might copy options between packets and might
strip some options. MPTCP's data sequence mapping includes the relative subflow sequence number instead of using the sequence
number in the segment. In this way, the mapping is independent of the packets that carry it.</t>

          <t>The receive window may be shrunk by some middleboxes at the subflow level. MPTCP will use the maximum window at data level, but will also obey
subflow-specific windows.</t>
        </list>
      </t>
          
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <!-- <t>The authors were originally supported by Trilogy (http://www.trilogy-project.org), a research project (ICT-216372) partially funded by the European Community under its Seventh Framework Program.</t>
      <t>Alan Ford was originally supported by Roke Manor Research and later Cisco Systems.</t> -->
      <t>The authors gratefully acknowledge significant input into this document from S&eacute;bastien Barr&eacute; and Andrew McDonald.</t>
      <t>The authors also wish to acknowledge reviews and contributions from Iljitsch van Beijnum, Lars Eggert, Marcelo Bagnulo, Robert Hancock, Pasi Sarolahti, Toby Moncaster, Philip Eardley, Sergio Lembo, Lawrence Conroy, Yoshifumi Nishida, Bob Briscoe, Stein Gjessing, Andrew McGregor, Georg Hampel, Anumita Biswas, Wes Eddy, Alexey Melnikov, Francis Dupont, Adrian Farrel, Barry Leiba, Robert Sparks, Sean Turner, Stephen Farrell, Martin Stiemerling, Gregory Detal, and Fabien Duchene.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document obsoletes <xref target="RFC6824"/> and as such IANA is requested to update the TCP option space registry to point to this document for Multipath TCP, as follows:</t>

      <texttable anchor="table_tcpo" title="TCP Option Kind Numbers">
        <ttcol align="center">Kind</ttcol>
        <ttcol align="center">Length</ttcol>
        <ttcol align="center">Meaning</ttcol>
        <ttcol align="center">Reference</ttcol>

        <c>30</c>
        <c>N</c>
        <c>Multipath TCP (MPTCP)</c>
        <c>This document</c>
      </texttable>

    <section anchor="IANA_subtypes" title="MPTCP Option Subtypes">
    <t>The 4-bit MPTCP subtype sub-registry ("MPTCP Option Subtypes" under the "Transmission Control Protocol (TCP) Parameters" registry) was defined in <xref target="RFC6824"/>.
      This document defines one additional subtype (ADD_ADDR) and updates the references to this document for all sub-types except ADD_ADDR, which is deprecated. The updates are
      listed in the following table.</t>

      <texttable anchor="table_iana" title="MPTCP Option Subtypes">
        <ttcol align="center">Value</ttcol>
        <ttcol align="center">Symbol</ttcol>
        <ttcol align="center">Name</ttcol>
        <ttcol align="center">Reference</ttcol>

        <c>0x0</c>
        <c>MP_CAPABLE</c>
        <c>Multipath Capable</c>
        <c>This document, <xref target="sec_init"/></c>

        <c>0x1</c>
        <c>MP_JOIN</c>
        <c>Join Connection</c>
        <c>This document, <xref target="sec_join"/></c>
        
        <c>0x2</c>
        <c>DSS</c>
        <c>Data Sequence Signal (Data ACK and data sequence mapping)</c>
        <c>This document, <xref target="sec_generalop"/></c>
      
        <c>0x3</c>
        <c>ADD_ADDR</c>
        <c>Add Address</c>
        <c>This document, <xref target="sec_add_address"/></c>
        
        <c>0x4</c>
        <c>REMOVE_ADDR</c>
        <c>Remove Address</c>
        <c>This document, <xref target="sec_remove_addr"/></c>
       
        <c>0x5</c>
        <c>MP_PRIO</c>
        <c>Change Subflow Priority</c>
        <c>This document, <xref target="sec_policy"/></c>
       
        <c>0x6</c>
        <c>MP_FAIL</c>
        <c>Fallback</c>
        <c>This document, <xref target="sec_fallback"/></c>
       
        <c>0x7</c>
        <c>MP_FASTCLOSE</c>
        <c>Fast Close</c>
        <c>This document, <xref target="sec_fastclose"/></c>
       
        <c>0x8</c>
        <c>MP_TCPRST</c>
        <c>Subflow Reset</c>
        <c>This document, <xref target="sec_reset"/></c>

        <c>0xf</c>
        <c>MP_EXPERIMENTAL</c>
        <c>Reserved for private experiments</c>
        <c></c>
        
      </texttable>

      <t>Values 0x9 through 0xe are currently unassigned. Option 0xf is reserved for use by private experiments. Its use may be formalized in a future specification.</t>
      </section>

      <section anchor="IANA_handshake" title="MPTCP Handshake Algorithms">
      <t>IANA has created another sub-registry, "MPTCP Handshake Algorithms" under the "Transmission Control Protocol (TCP) Parameters" registry, based on the flags in MP_CAPABLE (<xref target="sec_init"/>). IANA is requested to update the references of this table to this document, as follows:</t>

      <texttable anchor="table_crypto" title="MPTCP Handshake Algorithms">
        <ttcol align="center">Flag Bit</ttcol>
        <ttcol align="center">Meaning</ttcol>
        <ttcol align="center">Reference</ttcol>

        <c>A</c>
        <c>Checksum required</c>
        <c>This document, <xref target="sec_init"/></c>

        <c>B</c>
        <c>Extensibility</c>
        <c>This document, <xref target="sec_init"/></c>

        <c>C</c>
        <c>Do not attempt to establish new subflows to the source address.</c>
        <c>This document, <xref target="sec_init"/></c>

        <c>D-G</c>
        <c>Unassigned</c>
        <c></c>

        <c>H</c>
        <c>HMAC-SHA256</c>
        <c>This document, <xref target="sec_join"/></c>
      </texttable>

      <t>Note that the meanings of bits D through H can be dependent upon bit B,
      depending on how Extensibility is defined in future specifications; see
      <xref target="sec_init"/> for more information.</t>

      <t>Future assignments in this registry are also
      to be defined by Standards Action as defined by <xref target="RFC5226"/>.
      Assignments consist of the value of the flags, a symbolic name for the algorithm,
      and a reference to its specification.</t>
      </section>

      <section anchor="IANA_rst" title="MP_TCPRST Reason Codes">
      <t>IANA is requested to create a further sub-registry, "MP_TCPRST Reason Codes" under the "Transmission Control Protocol (TCP) Parameters" registry, based on the reason code in MP_TCPRST (<xref target="sec_reset"/>):</t>

      <texttable anchor="table_rstcodes" title="MPTCP MP_TCPRST Reason Codes">
        <ttcol align="center">Code</ttcol>
        <ttcol align="center">Meaning</ttcol>
        <ttcol align="center">Reference</ttcol>

        <c>0x00</c>
        <c>Unspecified TCP error</c>
        <c>This document, <xref target="sec_reset"/></c>

        <c>0x01</c>
        <c>MPTCP specific error</c>
        <c>This document, <xref target="sec_reset"/></c>

        <c>0x02</c>
        <c>Lack of resources</c>
        <c>This document, <xref target="sec_reset"/></c>

        <c>0x03</c>
        <c>Administratively prohibited</c>
        <c>This document, <xref target="sec_reset"/></c>

        <c>0x04</c>
        <c>Too much outstanding data</c>
        <c>This document, <xref target="sec_reset"/></c>

        <c>0x05</c>
        <c>Unacceptable performance</c>
        <c>This document, <xref target="sec_reset"/></c>

        <c>0x06</c>
        <c>Middlebox interference</c>
        <c>This document, <xref target="sec_reset"/></c>
      </texttable>
      </section>

    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>

    <references title="Normative References">
      &RFC0793;
      &RFC2119;
      &RFC6182;

<reference anchor='SHS' target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf"><front><title abbrev="Secure Hash Standard">Secure Hash Standard</title><author><organization>National Institute of Science and Technology</organization></author><date month="August" year="2015"/></front><seriesInfo name="Federal Information Processing Standard (FIPS)" value="180-4"/></reference>

    </references>

    <references title="Informative References">
      &RFC1122;
      &RFC1323;
      &RFC1918;
      &RFC2018;
      &RFC2104;
      &RFC5681;
      &RFC2979;
      &RFC2992;
      &RFC3022;
      &RFC3135;
      &RFC3168;
      &RFC4086;
      &RFC4987;
      &RFC5226;
      &RFC6181;
      &RFC6234;
      &RFC6356;
      &RFC6897;
      &RFC5961;
      &RFC6528;
      &RFC6824;
      &RFC7413;
      &RFC7430;


<!--      &TCPLO; draft-ananth-tcpm-tcpoptext-00; Expired-->



<reference anchor='TCPLO'>
<front>
<title>TCP option space extension</title>

<author initials='A' surname='Ramaiah' fullname='Anantha Ramaiah'>
    <organization />
</author>

<date month='March' day='26' year='2012' />

<abstract><t>The document goals are as follows: Firstly, this document summarizes the motivations for extending TCP option space.  Secondly, It tries to summarize the various known issues that needs to be taken into account while extending the TCP option space.  Thirdly, it briefly provides a short summary of the various TCP option space proposals that has been proposed so far.  Some additional proposals which includes variations to the existing proposals are also presented. The goal of this document is to rejuvenate the discussions on this topic and eventually to converge on a scheme for extending TCP option space.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>




<reference anchor='norm' target="http://www.usenix.org/events/sec01/full_papers/handley/handley.pdf"><front><title abbrev="Network Intrusion Detection: Evasion, Traffic Normalization, and End-to-End Protocol Semantics ">Network Intrusion Detection: Evasion, Traffic Normalization, and End-to-End Protocol Semantics</title><author initials='M.' surname='Handley' fullname='Mark Handley'><organization>ACIRI</organization></author><author initials='V.' surname='Paxson' fullname='Vern Paxson'><organization>ACIRI</organization></author><author initials='C.' surname='Kreibich' fullname='Christian Kreibich'><organization>Technische Universitat Munchen</organization></author><date year="2001"/></front><seriesInfo name="Usenix Security" value="2001"/></reference>

<reference anchor='howhard' target="https://www.usenix.org/conference/nsdi12/how-hard-can-it-be-designing-and-implementing-deployable-multipath-tcp">
<front><title abbrev="How Hard Can It Be? Designing and Implementing a Deployable Multipath TCP">How Hard Can It Be? Designing and Implementing a Deployable Multipath TCP</title>
<author initials='C.' surname='Raiciu' fullname='Costin Raiciu'><organization>Universitatea Politehnica Bucuresti</organization></author>
<author initials='C.' surname='Paasch' fullname='Christoph Paasch'><organization>Universite Catholique de Louvain</organization></author>
<author initials='S.' surname='Barre' fullname='Sebastien Barre'><organization>Universite Catholique de Louvain</organization></author>
<author initials='A.' surname='Ford' fullname='Alan Ford'><organization/></author>
<author initials='M.' surname='Honda' fullname='Michio Honda'><organization>Keio University</organization></author>
<author initials='F.' surname='Duchene' fullname='Fabien Duchene'><organization>Universite Catholique de Louvain</organization></author>
<author initials='O.' surname='Bonaventure' fullname='Olivier Bonaventure'><organization>Universite Catholique de Louvain</organization></author>
<author initials='M.' surname='Handley' fullname='Mark Handley'><organization>University College London</organization></author>
<date year="2012" />
</front>
<seriesInfo name="Usenix Symposium on Networked Systems Design and Implementation" value="2012"/>
</reference>

</references>

    <section title="Notes on Use of TCP Options" anchor="app_options">
      <t>The TCP option space is limited due to the length of the Data Offset field in the TCP header (4 bits), which defines the TCP header length in 32-bit words. With the standard TCP header being 20 bytes, this leaves a maximum of 40 bytes for options, and many of these may already be used by options such as timestamp and SACK.</t>

      <t>We have performed a brief study on the commonly used TCP options in SYN, data, and pure ACK packets, and found that there is enough room to fit all the options we propose using in this document.</t>

      <t>SYN packets typically include Maximum Segment Size (MSS) (4 bytes), window scale (3 bytes), SACK permitted (2 bytes), and timestamp (10 bytes) options. Together these sum to 19 bytes. Some operating systems appear to pad each option up to a word boundary, thus using 24 bytes (a brief survey suggests Windows XP and Mac OS X do this, whereas Linux does not).

      Optimistically, therefore, we have 21 bytes spare, or 16 if it has to be word-aligned. In either case, however, the SYN versions of Multipath Capable (12 bytes) and Join (12 or 16 bytes) options will fit in this remaining space.</t>

      <t>Note that due to the use of a 64-bit data-level sequence space, it is feasible that MPTCP will not require the timestamp option for protection against wrapped sequence numbers (PAWS <xref target="RFC1323"/>), since the data-level sequence space has far less chance of wrapping. Confirmation of the validity of this optimisation is for further study.</t>

      <t>TCP data packets typically carry timestamp options in every packet, taking 10 bytes (or 12 with padding). That leaves 30 bytes (or 28, if word-aligned). The Data Sequence Signal (DSS) option varies in length depending on whether the data sequence mapping and DATA_ACK are included, and whether the sequence numbers in use are 4 or 8 octets. The maximum size of the DSS option is 28 bytes, so even that will fit in the available space. But unless a connection is both bidirectional and high-bandwidth, it is unlikely that all that option space will be required on each DSS option.</t>

      <t>Within the DSS option, it is not necessary to include the data sequence mapping and DATA_ACK in each packet, and in many cases it may be possible to alternate their presence (so long as the mapping covers the data being sent in the following packet). It would also be possible to alternate between 4- and 8-byte sequence numbers in each option.</t>

      <t>On subflow and connection setup, an MPTCP option is also set on the third packet (an ACK). These are 20 bytes (for Multipath Capable) and 24 bytes (for Join), both of which will fit in the available option space.</t>

      <t>Pure ACKs in TCP typically contain only timestamps (10 bytes). Here, Multipath TCP typically 
needs to encode only the DATA_ACK (maximum of 12 bytes). Occasionally, ACKs will contain SACK information. Depending 
on the number of lost packets, SACK may utilize the entire option space. If a DATA_ACK had to be
included, then it is probably necessary to reduce the number of SACK blocks to accommodate the 
DATA_ACK. However, the presence of the DATA_ACK is unlikely to be necessary in a case where SACK is
in use, since until at least some of the SACK blocks have been retransmitted, the cumulative
data-level ACK will not be moving forward (or if it does, due to retransmissions on another path, 
then that path can also be used to transmit the new DATA_ACK).</t>

      <t>The ADD_ADDR option can be between 16 and 30 bytes, depending on whether IPv4 or IPv6 is used, and whether or not the port number is present. It is unlikely that such signaling would fit in a data packet (although if there is space, it is fine to include it). It is recommended to use duplicate ACKs with no other payload or options in order to transmit these rare signals. Note this is the reason for mandating that duplicate ACKs with MPTCP options are not taken as a signal of congestion.</t>

      <t>Finally, there are issues with reliable delivery of options. As options can also be sent on pure ACKs, these 
are not reliably sent. This is not an issue for DATA_ACK due to their
cumulative nature, but may be an issue for ADD_ADDR/REMOVE_ADDR options. Here, it is recommended 
to send these options redundantly (whether on multiple paths or on the same path on a number
of ACKs -- but interspersed with data in order to avoid interpretation as congestion). The cases where options are stripped by middleboxes are discussed in <xref target="sec_middleboxes"/>.</t>
    </section>

    <section title="TCP Fast Open and MPTCP" anchor="tfo">
      <t>TCP Fast Open (TFO) is an experimental TCP extension, described in
      <xref target="RFC7413"/>, which has been introduced to allow sending data
      one RTT earlier than with regular TCP. This is
      considered a valuable gain as very short connections are very common,
      especially for HTTP request/response schemes. It achieves this by sending
      the SYN-segment together with the application's data and allowing the listener to reply
      immediately with data after the SYN/ACK. <xref target="RFC7413"/> secures
      this mechanism, by using a new TCP option that includes a cookie which
      is negotiated in a preceding connection.</t>

	<t>When using TCP Fast Open in conjunction with MPTCP, there are two key
	points to take into account, detailed hereafter.</t>

	<section title="TFO cookie request with MPTCP" anchor="tfocookie">
	  <t>When a TFO initiator first connects to a listener, it cannot immediately
	  include data in the SYN for security reasons <xref target="RFC7413"/>.
	  Instead, it requests a cookie that will be used in subsequent
	  connections. This is done with the TCP cookie request/response options,
	  of respectively 2 bytes and 6-18 bytes (depending on the chosen cookie length).</t>

	  <t>TFO and MPTCP can be combined provided that the total length of all the
	  options does not exceed the maximum 40 bytes possible in TCP:

	  <list style="symbols">
	  <t>In the SYN: MPTCP uses a 4-bytes long MP_CAPABLE option. The MPTCP
	  and TFO options sum up to 6 bytes. With typical TCP-options using up
	  to 19 bytes in the SYN (24 bytes if options are padded at a word boundary),
	  there is enough space to combine the MP_CAPABLE with the TFO Cookie Request.</t>

	  <t>In the SYN+ACK: MPTCP uses a 12-bytes long MP_CAPABLE option, but
	  now TFO can be as long as 18 bytes. Since the maximum option length
	  may be exceeded, it is up to the listener to solve this by using a
	  shorter cookie.
	  As an example, if we consider that 19 bytes are used for classical
	  TCP options, the maximum possible cookie length would be
	  of 7 bytes. Note that the same limitation applies to subsequent
	  connections, for the SYN packet (because the initiator then echoes back
	  the cookie to the listener). Finally, if the security impact of reducing
	  the cookie size is not deemed acceptable, the listener can reduce the
	  amount of other TCP-options by omitting the TCP timestamps (as
	  outlined in <xref target="app_options"/>).</t>
	  </list></t>
	</section>

	<section title="Data sequence mapping under TFO" anchor="tfodata">
	  <t>MPTCP uses, in the TCP establishment phase, a key exchange that is
	  used to generate the Initial Data Sequence Numbers (IDSNs). In particular,
	  the SYN with MP_CAPABLE occupies the first octet of the data sequence
	  space. With TFO, one way to handle the data sent together with the SYN
	  would be to consider an implicit DSS mapping that covers that SYN segment
	  (since there is not enough space in the SYN to include a DSS option).
	  The problem with that approach is that if a middlebox modifies the TFO
	  data, this will not be noticed by MPTCP because of the absence of a
	  DSS-checksum. For example, a TCP (but not MPTCP)-aware middlebox could
	  insert bytes at the beginning of the stream and adapt the TCP checksum
	  and sequence numbers accordingly. With an implicit mapping, this would
	  give to initiator and listener a different view on the DSS-mapping, with no
	  way to detect this inconsistency as the DSS checksum is not present.</t>

	  <t>To solve this, the TFO data must not be considered part of the
	  Data Sequence Number space: the SYN with MP_CAPABLE still occupies
	  the first octet of data sequence space, but then the first non-TFO
	  data byte occupies the second octet. This guarantees that, if the
	  use of DSS-checksum is negotiated, all data in the data sequence
	  number space is checksummed. We also note that this does not entail
	  a loss of functionality, because TFO-data is always only sent on the
	  initial subflow before any attempt to create additional subflows.</t>
	</section>

	<section title="Connection establishment examples" anchor="tfoexamples">
          <t>The following shows a few examples of possible TFO+MPTCP
          establishment scenarios.</t>

          <t>Before an initiator can send data together with the SYN, it must request
          a cookie to the listener, as shown in Figure <xref target="fig_tfocookie"/>.
	  This is done by simply combining the TFO and MPTCP options.</t>

          <figure align="center" anchor="fig_tfocookie" title="Cookie request - sequence number and length are annotated as Seq(Lenght) and used hereafter in the figures.">
          <artwork align="left"><![CDATA[
initiator                                                       listener
    |                                                              |
    |    S Seq=0(Length=0) <MP_CAPABLE>, <TFO cookie request>      |
    | -----------------------------------------------------------> |
    |                                                              |
    |    S. 0(0) ack 1 <MP_CAPABLE>, <TFO cookie>                  |
    | <----------------------------------------------------------- |
    |                                                              |
    |    .  0(0) ack 1 <MP_CAPABLE>                                |
    | -----------------------------------------------------------> |
    |                                                              |
           ]]></artwork>
	  </figure>

          <t>Once this is done, the received cookie can be used for TFO, as shown
          in Figure <xref target="fig_tfodata"/>. In this example, the initiator first
	  sends 20 bytes in the SYN. The listener immediately replies with 100 bytes
	  following the SYN-ACK upon which the initiator replies with 20 more bytes.
	  Note that the last segment in the figure
          has a TCP sequence number of 21, while the DSS subflow sequence
          number is 1 (because the TFO data is not part of the data sequence
          number space, as explained in Section <xref target="tfodata"/>.</t>

	  <figure align="center" anchor="fig_tfodata" title="The listener supports TFO">
          <artwork align="left"><![CDATA[
initiator                                                       listener
    |                                                              |
    |    S  0(20) <MP_CAPABLE>, <TFO cookie>                       |
    | -----------------------------------------------------------> |
    |                                                              |
    |    S. 0(0) ack 21 <MP_CAPABLE>                               |
    | <----------------------------------------------------------- |
    |                                                              |
    |    .  1(100) ack 21 <DSS ack=1 seq=1 ssn=1 dlen=100>         |
    | <----------------------------------------------------------- |
    |                                                              |
    |    .  21(0) ack 1 <MP_CAPABLE>                               |
    | -----------------------------------------------------------> |
    |                                                              |
    |    .  21(20) ack 101 <DSS ack=101 seq=1 ssn=1 dlen=20>       |
    | -----------------------------------------------------------> |
    |                                                              |
           ]]></artwork>
	  </figure>

          <t>In Figure <xref target="fig_tfofallback"/>, the listener does not support TFO.  The initiator detects
          that no state is created in the listener (as no data is acked), and now
          sends the MP_CAPABLE in the third ack, in order for the listener to
          build its MPTCP context at then end of the establishment.  Now, the
          tfo data, retransmitted, becomes part of the data sequence mapping
          because it is effectively sent (in fact re-sent) after the
          establishment.</t>

	  <figure align="center" anchor="fig_tfofallback" title="The listener does not support TFO">
          <artwork align="left"><![CDATA[
initiator                                                       listener
    |                                                              |
    |    S  0(20) <MP_CAPABLE>, <TFO cookie>                       |
    | -----------------------------------------------------------> |
    |                                                              |
    |    S. 0(0) ack 1 <MP_CAPABLE>                                |
    | <----------------------------------------------------------- |
    |                                                              |
    |    .  1(0) ack 1 <MP_CAPABLE>                                |
    | -----------------------------------------------------------> |
    |                                                              |
    |    .  1(20) ack 1 <DSS ack=1 seq=1 ssn=1 dlen=20>            |
    | -----------------------------------------------------------> |
    |                                                              |
    |    .  0(0) ack 21 <DSS ack=21 seq=1 ssn=1 dlen=0>            |
    | <----------------------------------------------------------- |
    |                                                              |
           ]]></artwork>
	  </figure>

          <t>It is also possible that the listener acknowledges only part of the TFO
          data, as illustrated in Figure <xref target="fig_tfopartial"/>. The
	  initiator will simply retransmit the missing data together with a DSS-mapping.</t>

	  <figure align="center" anchor="fig_tfopartial" title="Partial data acknowledgement">
          <artwork align="left"><![CDATA[
initiator                                                       listener
    |                                                              |
    |  S  0(1000) <MP_CAPABLE>, <TFO cookie>                       |
    | -----------------------------------------------------------> |
    |                                                              |
    |  S. 0(0) ack 501 <MP_CAPABLE>                                |
    | <----------------------------------------------------------- |
    |                                                              |
    |    .  501(0) ack 1 <MP_CAPABLE>                              |
    | -----------------------------------------------------------> |
    |                                                              |
    |   .  501(500) ack 1 <DSS ack=1 seq=1 ssn=1 dlen=500>         |
    | -----------------------------------------------------------> |
    |                                                              |
           ]]></artwork>
	  </figure>
     </section>
    </section>

    <section title="Control Blocks" anchor="app_tcb">
<t>Conceptually, an MPTCP connection can be represented as an MPTCP control
block that contains several variables that track the progress and the
state of the MPTCP connection and a set of linked TCP control blocks
that correspond to the subflows that have been established.</t>

<t>RFC 793 <xref target="RFC0793"/> specifies several state variables. Whenever possible, we reuse
the same terminology as RFC 793 to describe the state variables that are
maintained by MPTCP.</t>

<section title="MPTCP Control Block">
<t>The MPTCP control block contains the following variable per connection.</t>

<section title="Authentication and Metadata">
<t><list style="hanging">
<t hangText="Local.Token (32 bits):"> This is the token chosen by the local host on
this MPTCP connection. The token must be unique among all established
MPTCP connections, generated from the local key.</t>
<t hangText="Local.Key (64 bits):"> This is the key sent by the local host on this
MPTCP connection.</t>
<t hangText="Remote.Token (32 bits):"> This is the token chosen by the remote host on
this MPTCP connection, generated from the remote key.</t>
<t hangText="Remote.Key (64 bits):"> This is the key chosen by the remote host on
this MPTCP connection</t>
<t hangText="MPTCP.Checksum (flag):"> This flag is set to true if at least one of the 
hosts has set the A bit in the MP_CAPABLE options exchanged during connection establishment, 
and is set to false otherwise.  If this flag is set, the checksum must be computed in
all DSS options.</t>
</list></t>
</section>


<section title="Sending Side">
<t><list style="hanging">
<t hangText="SND.UNA (64 bits):"> This is the data sequence number of the next byte to be
acknowledged, at the MPTCP connection level. This variable is updated
upon reception of a DSS option containing a DATA_ACK.</t>
<t hangText="SND.NXT (64 bits):"> This is the data sequence number of the next byte to be
sent. SND.NXT is used to determine the value of the DSN in the DSS option.</t>
<t hangText="SND.WND (32 bits with RFC 1323, 16 bits otherwise):"> This is the sending window. MPTCP
maintains the sending window at the MPTCP connection level and the same
window is shared by all subflows. All subflows use the MPTCP connection
level SND.WND to compute the SEQ.WND value that is sent in each
transmitted segment.</t>
</list></t>
</section>

<section title="Receiving Side">
<t><list style="hanging">
<t hangText="RCV.NXT (64 bits):"> This is the data sequence number of the next byte that
is expected on the MPTCP connection. This state variable is modified
upon reception of in-order data. The value of RCV.NXT is used to specify
the DATA_ACK that is sent in the DSS option on all subflows.</t>
<t hangText="RCV.WND (32 bits with RFC 1323, 16 bits otherwise):"> This is the connection-level
receive window, which is the maximum of the RCV.WND on all the subflows.</t>
</list></t>
</section>
</section>

<section title="TCP Control Blocks">
<t>The MPTCP control block also contains a list of the TCP control blocks
that are associated to the MPTCP connection.</t>

<t>Note that the TCP control block on the TCP subflows does not contain the
RCV.WND and SND.WND state variables as these are maintained at the MPTCP
connection level and not at the subflow level.</t>

<t>Inside each TCP control block, the following state variables are defined.</t>

<section title="Sending Side">
<t><list style="hanging">
<t hangText="SND.UNA (32 bits):"> This is the sequence number of the next byte to be
acknowledged on the subflow. This variable is updated upon reception of
each TCP acknowledgment on the subflow.</t>
<t hangText="SND.NXT (32 bits):"> This is the sequence number of the next byte to be
sent on the subflow. SND.NXT is used to set the value of SEG.SEQ upon
transmission of the next segment.</t>
</list></t>
</section>

<section title="Receiving Side">
<t><list style="hanging">
<t hangText="RCV.NXT (32 bits):"> This is the sequence number of the next byte that
is expected on the subflow. This state variable is modified upon
reception of in-order segments. The value of RCV.NXT is copied to the
SEG.ACK field of the next segments transmitted on the subflow.</t>
<t hangText="RCV.WND (32 bits with RFC 1323, 16 bits otherwise):"> This is the 
subflow-level receive window that is updated with the window field from the 
segments received on this subflow.</t>
</list></t>
</section>
</section>

</section>

    <section title="Finite State Machine" anchor="app_fsm">
      <t>The diagram in <xref target="fig_fsm"/> shows the Finite State Machine for connection-level closure.  This illustrates how the DATA_FIN connection-level signal (indicated as the DFIN flag on a DATA_ACK) interacts with subflow-level FINs, and permits "break-before-make" handover between subflows.</t>

      <figure align="center" anchor="fig_fsm" title="Finite State Machine for Connection Closure">
        <artwork align="left"><![CDATA[
                              +---------+
                              | M_ESTAB |
                              +---------+
                     M_CLOSE    |     |    rcv DATA_FIN
                      -------   |     |    -------
 +---------+       snd DATA_FIN /       \ snd DATA_ACK[DFIN] +---------+
 |  M_FIN  |<-----------------           ------------------->| M_CLOSE |
 | WAIT-1  |---------------------------                      |   WAIT  |
 +---------+               rcv DATA_FIN \                    +---------+
   | rcv DATA_ACK[DFIN]         ------- |                   M_CLOSE |
   | --------------        snd DATA_ACK |                   ------- |
   | CLOSE all subflows                 |              snd DATA_FIN |
   V                                    V                           V
 +-----------+              +-----------+                  +-----------+
 |M_FINWAIT-2|              | M_CLOSING |                  | M_LAST-ACK|
 +-----------+              +-----------+                  +-----------+
   |              rcv DATA_ACK[DFIN] |           rcv DATA_ACK[DFIN] |
   | rcv DATA_FIN     -------------- |               -------------- |
   |  -------     CLOSE all subflows |           CLOSE all subflows |
   | snd DATA_ACK[DFIN]              V            delete MPTCP PCB  V
   \                          +-----------+                  +---------+
     ------------------------>|M_TIME WAIT|----------------->| M_CLOSED|
                              +-----------+                  +---------+
                                         All subflows in CLOSED
                                             ------------
                                         delete MPTCP PCB
         ]]></artwork>
      </figure>
    </section>



  </back>
</rfc>
